import type { ModuleSpec } from './types.ts'

export const MODULES: ModuleSpec[] = [
  {
    id: 0,
    name: 'SV Filter',
    display1: 'SV F.',
    category: 'Audio',
    description: 'The State Variable Filter will resonate and cutoff around a set frequency.',
    defaultBlocks: 4,
    minBlocks: 3,
    maxBlocks: 6,
    params: 2,
    cpu: 3,
    blocks: {
      audio_in: { initial: true, position: 0 },
      frequency: { initial: true, param: true, position: 1 },
      resonance: { initial: true, param: true, position: 2 },
      lowpass_out: { initial: true, position: 3 },
      hipass_out: { position: 4 },
      bandpass_out: { position: 5 },
    },
    options: { lowpass_out: { slot: 0, values: ['on', 'off'] }, hipass_out: { slot: 1, values: ['off', 'on'] }, bandpass_out: { slot: 2, values: ['off', 'on'] }, freq_change: { slot: 3, values: ['smooth', 'instant'] } },
    conditions: { lowpass_out: { type: 'toggle', option: 'lowpass_out' }, hipass_out: { type: 'toggle', option: 'hipass_out' }, bandpass_out: { type: 'toggle', option: 'bandpass_out' } },
  },
  {
    id: 1,
    name: 'Audio In',
    display1: 'A. In',
    category: 'Interface',
    description: 'Connect audio from the outside world into the grid.\nThis could be a guitar, bass, synth module, computer Audio, etc',
    defaultBlocks: 2,
    minBlocks: 1,
    maxBlocks: 2,
    params: 0,
    cpu: 0.4,
    blocks: { output_L: { initial: true, position: 0 }, output_R: { initial: true, position: 1 } },
    options: { channels: { slot: 0, values: ['stereo', 'left', 'right'] } },
    conditions: {
      output_L: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: 'stereo' }, { type: 'value', option: 'channels', value: 'left' }] },
      output_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: 'stereo' }, { type: 'value', option: 'channels', value: 'right' }] },
    },
  },
  {
    id: 2,
    name: 'Audio Out',
    display1: 'A. O.',
    category: 'Interface',
    description: 'Connect audio from your ZOIA into the outside world.\nConnect to your amplifier, a DI box, your audio interface, etc.\nAn optional gain control lets you tweak the output level.',
    defaultBlocks: 2,
    minBlocks: 1,
    maxBlocks: 3,
    params: 1,
    cpu: 1.7,
    blocks: { input_L: { initial: true, position: 0 }, input_R: { initial: true, position: 1 }, gain: { param: true, position: 2 } },
    options: { gain_control: { slot: 0, values: ['off', 'on'] }, channels: { slot: 1, values: ['stereo', 'left', 'right'] } },
    conditions: {
      input_L: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: 'stereo' }, { type: 'value', option: 'channels', value: 'left' }] },
      input_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: 'stereo' }, { type: 'value', option: 'channels', value: 'right' }] },
      gain: { type: 'toggle', option: 'gain_control' },
    },
  },
  {
    id: 3,
    name: 'Aliaser',
    display1: 'Alias.',
    category: 'Audio',
    description: 'Aliaser produces samples of incoming audio and compares them against each other to find imperfections.\nThese imperfections become the outgoing audio.\nAs sample count grows, so too does the thickness of the outgoing sound.\nThis effect is a signal hog so be sure to boost your connection strengths incoming and outgoing.\nTry connecting a LFO or envelope follower to the alias amount.',
    defaultBlocks: 3,
    minBlocks: 3,
    maxBlocks: 3,
    params: 1,
    cpu: 0.7,
    blocks: { audio_in: { initial: true, position: 0 }, num_of_samples: { initial: true, param: true, position: 1 }, audio_out: { initial: true, position: 2 } },
    options: {},
  },
  {
    id: 4,
    name: 'Sequencer',
    display1: 'Seq.',
    category: 'CV',
    description: 'The sequencer allows you to create a number of "steps" (1-32) that can be cycled through,\nand each step can be used to send a CV value out of that tracks output.\nThe sequencer can have up to 8 tracks, each with their own unique output.',
    defaultBlocks: 6,
    minBlocks: 3,
    maxBlocks: 44,
    params: 36,
    cpu: 2,
    blocks: {
      step_1: { initial: true, param: true, position: 0 },
      step_2: { initial: true, param: true, position: 1 },
      step_3: { initial: true, param: true, position: 2 },
      step_4: { initial: true, param: true, position: 3 },
      step_5: { param: true, position: 4 },
      step_6: { param: true, position: 5 },
      step_7: { param: true, position: 6 },
      step_8: { param: true, position: 7 },
      step_9: { param: true, position: 8 },
      step_10: { param: true, position: 9 },
      step_11: { param: true, position: 10 },
      step_12: { param: true, position: 11 },
      step_13: { param: true, position: 12 },
      step_14: { param: true, position: 13 },
      step_15: { param: true, position: 14 },
      step_16: { param: true, position: 15 },
      step_17: { param: true, position: 16 },
      step_18: { param: true, position: 17 },
      step_19: { param: true, position: 18 },
      step_20: { param: true, position: 19 },
      step_21: { param: true, position: 20 },
      step_22: { param: true, position: 21 },
      step_23: { param: true, position: 22 },
      step_24: { param: true, position: 23 },
      step_25: { param: true, position: 24 },
      step_26: { param: true, position: 25 },
      step_27: { param: true, position: 26 },
      step_28: { param: true, position: 27 },
      step_29: { param: true, position: 28 },
      step_30: { param: true, position: 29 },
      step_31: { param: true, position: 30 },
      step_32: { param: true, position: 31 },
      gate_in: { initial: true, param: true, position: 32 },
      queue_start: { param: true, position: 33 },
      out_track_1: { initial: true, position: 34, sort: 44 },
      out_track_2: { position: 35, sort: 45 },
      out_track_3: { position: 36, sort: 46 },
      out_track_4: { position: 37, sort: 47 },
      out_track_5: { position: 38, sort: 48 },
      out_track_6: { position: 39, sort: 49 },
      out_track_7: { position: 40, sort: 50 },
      out_track_8: { position: 41, sort: 51 },
      key_input_note: { param: true, position: 42 },
      key_input_gate: { param: true, position: 43 },
    },
    options: {
      number_of_steps: { slot: 0, values: { min: 1, max: 32 } },
      num_of_tracks: { slot: 1, values: { min: 1, max: 8 } },
      restart_jack: { slot: 2, values: ['off', 'on'] },
      behavior: { slot: 3, values: ['loop', 'one_shot', 'cv_step'] },
      key_input: { slot: 4, values: ['off', 'selected', 'increment', 'active'] },
      number_of_pages: { slot: 5, values: { min: 1, max: 8 } },
    },
    conditions: {
      step_1: { type: 'sequential', option: 'number_of_steps', startPosition: 0, nameTemplate: 'step_{n}' },
      queue_start: { type: 'toggle', option: 'restart_jack' },
      key_input_note: {
        type: 'multi',
        operator: 'or',
        conditions: [{ type: 'value', option: 'key_input', value: 'selected' }, { type: 'value', option: 'key_input', value: 'increment' }, { type: 'value', option: 'key_input', value: 'active' }],
      },
      key_input_gate: {
        type: 'multi',
        operator: 'or',
        conditions: [{ type: 'value', option: 'key_input', value: 'selected' }, { type: 'value', option: 'key_input', value: 'increment' }, { type: 'value', option: 'key_input', value: 'active' }],
      },
      out_track_1: { type: 'sequential', option: 'num_of_tracks', startPosition: 34, nameTemplate: 'out_track_{n}' },
    },
  },
  {
    id: 5,
    name: 'LFO',
    category: 'CV',
    description: "The Low Frequency Oscillator is one of the workhorse modules of the ZOIA.\nThis will generate CV in the waveform and range of your choosing.\nConnect it to a sequencer to cycle through steps, to an audio effect to\nswing it's parameters around, or to any outboard piece of gear through a\nMIDI or CV interface module.\nThe connection strength you enter at the output will determine the maximum\nsweep of the LFO.",
    defaultBlocks: 2,
    minBlocks: 2,
    maxBlocks: 5,
    params: 4,
    cpu: 0.3,
    blocks: {
      cv_control: { initial: true, param: true, position: 0 },
      tap_control: { param: true, position: 1 },
      swing_amount: { param: true, position: 2 },
      phase_input: { param: true, position: 4 },
      phase_reset: { param: true, position: 5 },
      output: { initial: true, position: 3 },
    },
    options: {
      waveform: { slot: 0, values: ['square', 'sine', 'triangle', 'sawtooth', 'ramp', 'random'] },
      swing_control: { slot: 1, values: ['off', 'on'] },
      output: { slot: 2, values: ['0 to 1', '-1 to 1'] },
      input: { slot: 3, values: ['cv', 'tap', 'linear_cv'] },
      phase_input: { slot: 4, values: ['off', 'on'] },
      phase_reset: { slot: 5, values: ['off', 'on'] },
    },
    conditions: {
      tap_control: { type: 'value', option: 'input', value: 'tap' },
      swing_amount: { type: 'toggle', option: 'swing_control' },
      phase_input: { type: 'toggle', option: 'phase_input' },
      phase_reset: { type: 'toggle', option: 'phase_reset' },
    },
  },
  {
    id: 6,
    name: 'ADSR',
    category: 'CV',
    description: "The Attack Decay Sustain Release module is what gives a note generated\nfrom an oscillator a natural sounding envelope when played from a keyboard.\nConnect your oscillator or other audio source to the input of a VCA,\nand connect the CV output of the ADSR to the CV input on the VCA.\nConnect the keyboard or MIDI note gate out to the CV input of the ADSR\nand you've got yourself a simple synthesizer!\nTweak the values to taste, or connect them to other CV inputs for experimentation.\nUse the optional retrigger input to restart the envelope around a note\nthat is played before the ADSR is released.",
    defaultBlocks: 6,
    minBlocks: 4,
    maxBlocks: 10,
    params: 9,
    cpu: 0.07,
    blocks: {
      cv_in: { initial: true, param: true, position: 0 },
      retrigger: { param: true, position: 1 },
      delay: { param: true, position: 2 },
      attack: { initial: true, param: true, position: 3 },
      hold_attack_decay: { param: true, position: 4 },
      decay: { initial: true, param: true, position: 5 },
      sustain: { initial: true, param: true, position: 6 },
      hold_sustain_release: { param: true, position: 7 },
      release: { initial: true, param: true, position: 8 },
      cv_out: { initial: true, position: 9 },
    },
    options: {
      retrigger_input: { slot: 0, values: ['off', 'on'] },
      initial_delay: { slot: 1, values: ['off', 'on'] },
      hold_attack_decay: { slot: 2, values: ['off', 'on'] },
      str: { slot: 3, values: ['on', 'off'] },
      immediate_release: { slot: 4, values: ['on', 'off'] },
      hold_sustain_release: { slot: 5, values: ['off', 'on'] },
      time_scale: { slot: 6, values: ['exponent', 'linear'] },
    },
    conditions: {
      retrigger: { type: 'toggle', option: 'retrigger_input' },
      delay: { type: 'toggle', option: 'initial_delay' },
      hold_attack_decay: { type: 'toggle', option: 'hold_attack_decay' },
      sustain: { type: 'toggle', option: 'str' },
      hold_sustain_release: { type: 'toggle', option: 'hold_sustain_release' },
      release: { type: 'toggle', option: 'str' },
    },
  },
  {
    id: 7,
    name: 'VCA',
    category: 'Audio',
    description: 'The Voltage Controlled Amplifier module will interpret incoming CV at the\nlevel control and boost or cut the volume.\nConnect an ADSR to create a natural sounding envelope for an oscillator passing through.\nConnect an LFO to create a tremolo effect.\nOr connect an expression pedal module or MIDI input for an external volume control.',
    defaultBlocks: 3,
    minBlocks: 3,
    maxBlocks: 5,
    params: 1,
    cpu: 0.7,
    blocks: {
      audio_in_1: { initial: true, position: 0 },
      audio_in_2: { position: 1 },
      level_control: { initial: true, param: true, position: 2 },
      audio_out_1: { initial: true, position: 3 },
      audio_out_2: { position: 4 },
    },
    options: { channels: { slot: 0, values: ['1in->1out', 'stereo'] } },
    conditions: { audio_in_2: { type: 'value', option: 'channels', value: 'stereo' }, audio_out_2: { type: 'value', option: 'channels', value: 'stereo' } },
  },
  {
    id: 8,
    name: 'Audio Multiply',
    display1: 'A. Mult.',
    category: 'Audio',
    description: 'Takes one audio input and mathematically multiplies it with the other.\nThis produces a ring mod/vocoder-like effect.\nThis module likes hot signals to be sure to bump the connection strengths.\nRemember that silence at any one of the inputs will result in silence at the output!',
    defaultBlocks: 3,
    minBlocks: 3,
    maxBlocks: 3,
    params: 0,
    cpu: 0.4,
    blocks: { audio_in_1: { initial: true, position: 0 }, audio_in_2: { initial: true, position: 1 }, audio_out: { initial: true, position: 2 } },
    options: {},
  },
  {
    id: 9,
    name: 'Bit Crusher',
    display1: 'Bit Cr.',
    category: 'Audio',
    description: 'Bit Crusher produces distortion by reducing audio bandwidth by a set number of bits.\nDistortion becomes audible around 20 bits reduced.\nThis effect can get noisy so try it with a gate.',
    defaultBlocks: 3,
    minBlocks: 3,
    maxBlocks: 3,
    params: 1,
    cpu: 1,
    blocks: { audio_in: { initial: true, position: 0 }, crushed_bits: { initial: true, param: true, position: 1 }, audio_out: { initial: true, position: 2 } },
    options: { fractions: { slot: 0, values: ['off', 'on'] } },
  },
  {
    id: 10,
    name: 'Sample and Hold',
    display1: 'S&H',
    category: 'CV',
    description: 'Sample and Hold will take the CV value at the input and hold it in place\nat the output until triggered to look again at the input and update the output.\nConnect a LFO to the trigger to convert smooth changes in CV into stepped changes in CV.\nThe speed of the LFO will determine the perceived resolution of the CV output.',
    defaultBlocks: 3,
    minBlocks: 3,
    maxBlocks: 3,
    params: 2,
    cpu: 0.1,
    blocks: { cv_in: { initial: true, param: true, position: 0 }, trigger: { initial: true, param: true, position: 1 }, cv_out: { initial: true, position: 2 } },
    options: { 'track & hold': { slot: 0, values: ['off', 'on'] } },
  },
  {
    id: 11,
    name: 'OD and Distortion',
    display1: 'OD & D.',
    category: 'Effect',
    description: 'The OD & Distortion module provides classic overdrive and distortion tones.',
    defaultBlocks: 4,
    minBlocks: 4,
    maxBlocks: 4,
    params: 2,
    cpu: 17,
    blocks: {
      audio_in: { initial: true, position: 0 },
      input_gain: { initial: true, param: true, position: 1 },
      output_gain: { initial: true, param: true, position: 3 },
      audio_out: { initial: true, position: 2 },
    },
    options: { model: { slot: 0, values: ['plexi', 'germ', 'classic', 'pushed', 'edgy'] } },
  },
  {
    id: 12,
    name: 'Env Follower',
    display1: 'En. F.',
    display: 'Env Follow.',
    category: 'Analysis',
    description: 'Envelope Follower will interpret an incoming audio signal as a CV signal\nbased on its signal strength.\nUse this to trigger filter sweeps, audio effects parameters, LFO rates, etc.\nThe connection strength can act as a sensitivity control.',
    defaultBlocks: 2,
    minBlocks: 2,
    maxBlocks: 4,
    params: 2,
    cpu: 5,
    blocks: { audio_in: { initial: true, position: 0 }, rise_time: { param: true, position: 1 }, fall_time: { param: true, position: 2 }, cv_out: { initial: true, position: 3 } },
    options: { rise_fall_time: { slot: 0, values: ['off', 'on'] }, output_scale: { slot: 1, values: ['log', 'linear'] } },
    conditions: { rise_time: { type: 'toggle', option: 'rise_fall_time' }, fall_time: { type: 'toggle', option: 'rise_fall_time' } },
  },
  {
    id: 13,
    name: 'Delay Line',
    display1: 'DL',
    category: 'Audio',
    description: 'The Delay Line is a simple module that takes audio at the input and\ndelays it by a set amount of time.\nThere is no dry signal, there are no repeats.\nYou can create repeats by connecting the output back to the input,\nusing the connection strength to adjust number of repeats.',
    defaultBlocks: 3,
    minBlocks: 3,
    maxBlocks: 4,
    params: 3,
    cpu: 3,
    blocks: {
      audio_in: { initial: true, position: 0 },
      delay_time: { initial: true, param: true, position: 1 },
      modulation_in: { param: true, position: 2 },
      tap_tempo_in: { param: true, position: 3 },
      audio_out: { initial: true, position: 4 },
    },
    options: {
      max_time: { slot: 0, values: ['1s', '2s', '4s', '8s', '16s', '100ms'] },
      tap_tempo_in: { slot: 1, values: ['no', 'yes'] },
      interpolation: { slot: 2, values: ['on', 'off'] },
      cv_input: { slot: 3, values: ['exponent', 'linear'] },
    },
    conditions: { delay_time: { type: 'value', option: 'tap_tempo_in', value: 'no' }, modulation_in: { type: 'toggle', option: 'tap_tempo_in' }, tap_tempo_in: { type: 'toggle', option: 'tap_tempo_in' } },
  },
  {
    id: 14,
    name: 'Oscillator',
    display1: 'Osc.',
    category: 'Audio',
    description: 'Generates an audio signal in the waveform of your choice.\nConnect a MIDI device, keyboard module, sequencer, pitch detector,\nLFO, or any CV source to select the frequency or note the oscillator will play.\nYou can modulate the frequency or pulse width with the optional parameters.\nNegative CV inputs (from -1 to 0) will generate sub-bass frequencies\nbetween 0.027Hz and 27.49Hz. Be careful!',
    defaultBlocks: 2,
    minBlocks: 2,
    maxBlocks: 4,
    params: 2,
    cpu: 10,
    blocks: { frequency: { initial: true, param: true, position: 0 }, fm_input: { position: 1 }, duty_cycle: { param: true, position: 2 }, audio_out: { initial: true, position: 3 } },
    options: {
      waveform: { slot: 0, values: ['sine', 'square', 'triangle', 'sawtooth'] },
      fm_in: { slot: 1, values: ['off', 'on'] },
      duty_cycle: { slot: 2, values: ['off', 'on'] },
      upsampling: { slot: 3, values: ['none', '2x'] },
    },
    conditions: { fm_input: { type: 'toggle', option: 'fm_in' }, duty_cycle: { type: 'toggle', option: 'duty_cycle' } },
  },
  {
    id: 15,
    name: 'Pushbutton',
    display1: 'PB',
    category: 'Interface',
    description: 'Turns a grid button into a button you can push to send a CV signal.\nTap in a tempo, open up a VCA, trigger a sequencer, or anything else.\nThe grid is your oyster!',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 0,
    cpu: 0.02,
    blocks: { cv_out: { initial: true, position: 1 } },
    options: { action: { slot: 0, values: ['momentary', 'latching'] }, normally: { slot: 1, values: ['zero', 'one'] } },
  },
  {
    id: 16,
    name: 'Keyboard',
    display1: 'Keyb.',
    category: 'Interface',
    description: 'Turns grid buttons into a keyboard you can connect to an oscillator and play.\nNo external MIDI controller necessary!\nTune each keyboard button using the knob to have it play your desired note.',
    defaultBlocks: 4,
    minBlocks: 4,
    maxBlocks: 43,
    params: 40,
    cpu: 0.1,
    blocks: {
      note_1: { initial: true, param: true, position: 0 },
      note_2: { param: true, position: 1 },
      note_3: { param: true, position: 2 },
      note_4: { param: true, position: 3 },
      note_5: { param: true, position: 4 },
      note_6: { param: true, position: 5 },
      note_7: { param: true, position: 6 },
      note_8: { param: true, position: 7 },
      note_9: { param: true, position: 8 },
      note_10: { param: true, position: 9 },
      note_11: { param: true, position: 10 },
      note_12: { param: true, position: 11 },
      note_13: { param: true, position: 12 },
      note_14: { param: true, position: 13 },
      note_15: { param: true, position: 14 },
      note_16: { param: true, position: 15 },
      note_17: { param: true, position: 16 },
      note_18: { param: true, position: 17 },
      note_19: { param: true, position: 18 },
      note_20: { param: true, position: 19 },
      note_21: { param: true, position: 20 },
      note_22: { param: true, position: 21 },
      note_23: { param: true, position: 22 },
      note_24: { param: true, position: 23 },
      note_25: { param: true, position: 24 },
      note_26: { param: true, position: 28 },
      note_27: { param: true, position: 29 },
      note_28: { param: true, position: 30 },
      note_29: { param: true, position: 31 },
      note_30: { param: true, position: 32 },
      note_31: { param: true, position: 33 },
      note_32: { param: true, position: 34 },
      note_33: { param: true, position: 35 },
      note_34: { param: true, position: 36 },
      note_35: { param: true, position: 37 },
      note_36: { param: true, position: 38 },
      note_37: { param: true, position: 39 },
      note_38: { param: true, position: 40 },
      note_39: { param: true, position: 41 },
      note_40: { param: true, position: 42 },
      note_out: { initial: true, position: 25 },
      gate_out: { initial: true, position: 26 },
      trigger_out: { initial: true, position: 27 },
    },
    options: { num_of_notes: { slot: 0, values: { min: 1, max: 40 } } },
    conditions: { note_1: { type: 'sequential', option: 'num_of_notes', startPosition: 0, nameTemplate: 'note_{n}' } },
  },
  {
    id: 17,
    name: 'CV Invert',
    display1: 'CV Inv.',
    category: 'CV',
    description: 'Inverts the incoming CV.\nFor example, a CV input of 1 will output as -1.\nAn input of 0.2 will output as -0.2.',
    defaultBlocks: 2,
    minBlocks: 2,
    maxBlocks: 2,
    params: 1,
    cpu: 0.02,
    blocks: { cv_in: { initial: true, param: true, position: 0 }, cv_out: { initial: true, position: 1 } },
    options: {},
  },
  {
    id: 18,
    name: 'Steps',
    category: 'CV',
    description: 'Steps will interpret incoming changes in upward CV as a tempo, split the wave\ncycle into a set number of steps, and then send the CV present at the input\nduring each step to the output.\nYou can use this to convert a nice smooth LFO and reduce its resolution into steps.',
    defaultBlocks: 3,
    minBlocks: 3,
    maxBlocks: 3,
    params: 2,
    cpu: 0.7,
    blocks: { cv_in: { initial: true, param: true, position: 0 }, quant_steps: { initial: true, param: true, position: 1 }, cv_out: { initial: true, position: 2 } },
    options: {},
  },
  {
    id: 19,
    name: 'Slew Limiter',
    display1: 'Slew L.',
    category: 'CV',
    description: 'Slew Limiter is similar in behaviour to CV Filter except that the rate of\nchange in changes of CV happen linearly instead of logarithmically.\nThis is the classic portamento, and can be used anywhere CV changes occur\nto give them a different feel.\nTry using an unlinked Slew Limiter with a stomp switch module to give more\nexpression pedal-like behaviour to your stomp switch.',
    defaultBlocks: 3,
    minBlocks: 3,
    maxBlocks: 4,
    params: 2,
    cpu: 0.2,
    blocks: {
      cv_in: { initial: true, param: true, position: 0 },
      slew_rate: { initial: true, param: true, position: 1 },
      rising_lag: { param: true, position: 2 },
      falling_lag: { param: true, position: 3 },
      cv_out: { initial: true, position: 4 },
    },
    options: { control: { slot: 0, values: ['linked', 'separate'] } },
    conditions: {
      slew_rate: { type: 'value', option: 'control', value: 'linked' },
      rising_lag: { type: 'value', option: 'control', value: 'separate' },
      falling_lag: { type: 'value', option: 'control', value: 'separate' },
    },
  },
  {
    id: 20,
    name: 'Midi Notes In',
    display1: 'MNI',
    display: 'M. Notes In',
    category: 'Interface',
    description: 'Connect your MIDI keyboard controller to the ZOIA.\nConnect the note out to an oscillator to have it play your note,\nand connect the gate out to an ADSR (connected to a VCA) for a natural envelope.',
    defaultBlocks: 2,
    minBlocks: 2,
    maxBlocks: 32,
    params: 0,
    cpu: 0.3,
    blocks: {
      note_out_1: { initial: true, position: 0 },
      gate_out_1: { initial: true, position: 1 },
      velocity_out_1: { position: 2 },
      trigger_out_1: { position: 3 },
      note_out_2: { position: 4 },
      gate_out_2: { position: 5 },
      velocity_out_2: { position: 6 },
      trigger_out_2: { position: 7 },
      note_out_3: { position: 8 },
      gate_out_3: { position: 9 },
      velocity_out_3: { position: 10 },
      trigger_out_3: { position: 11 },
      note_out_4: { position: 12 },
      gate_out_4: { position: 13 },
      velocity_out_4: { position: 14 },
      trigger_out_4: { position: 15 },
      note_out_5: { position: 16 },
      gate_out_5: { position: 17 },
      velocity_out_5: { position: 18 },
      trigger_out_5: { position: 19 },
      note_out_6: { position: 20 },
      gate_out_6: { position: 21 },
      velocity_out_6: { position: 22 },
      trigger_out_6: { position: 23 },
      note_out_7: { position: 24 },
      gate_out_7: { position: 25 },
      velocity_out_7: { position: 26 },
      trigger_out_7: { position: 27 },
      note_out_8: { position: 28 },
      gate_out_8: { position: 29 },
      velocity_out_8: { position: 30 },
      trigger_out_8: { position: 31 },
    },
    options: {
      midi_channel: { slot: 0, values: { min: 1, max: 16 } },
      num_of_outs: { slot: 1, values: { min: 1, max: 8 } },
      priority: { slot: 2, values: ['newest', 'oldest', 'highest', 'lowest', 'RoundRobin'] },
      greedy: { slot: 3, values: ['no', 'yes'] },
      velocity_out: { slot: 4, values: ['off', 'on'] },
      low_note: { slot: 5, values: { min: 0, max: 127 } },
      high_note: { slot: 6, values: { min: 127, max: 0 } },
      trigger_pulse: { slot: 7, values: ['off', 'on'] },
    },
    conditions: {
      note_out_1: { type: 'sequential', option: 'num_of_outs', startPosition: 0, nameTemplate: 'note_out_{n}', blockCount: 4 },
      gate_out_1: { type: 'sequential', option: 'num_of_outs', startPosition: 1, nameTemplate: 'gate_out_{n}', blockCount: 4 },
      velocity_out_1: { type: 'sequential', option: 'num_of_outs', startPosition: 2, nameTemplate: 'velocity_out_{n}', blockCount: 4, condition: { type: 'toggle', option: 'velocity_out' } },
      trigger_out_1: { type: 'sequential', option: 'num_of_outs', startPosition: 3, nameTemplate: 'trigger_out_{n}', blockCount: 4, condition: { type: 'toggle', option: 'trigger_pulse' } },
    },
  },
  {
    id: 21,
    name: 'Midi CC In',
    display1: 'CCI',
    category: 'Interface',
    description: 'Connect encoder knobs and sliders on a MIDI interface.\nTake note of the outgoing CC number of each control and enter it into the controller option.',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 0,
    cpu: 0.1,
    blocks: { cc_out: { initial: true, position: 0 } },
    options: { midi_channel: { slot: 0, values: { min: 1, max: 16 } }, controller: { slot: 1, values: { min: 0, max: 127 } }, output_range: { slot: 2, values: ['0 to 1', '-1 to 1'] } },
  },
  {
    id: 22,
    name: 'Multiplier',
    display1: 'Mult.',
    category: 'CV',
    description: "Multiply will take the CV signal present at each input and multiply\nthem together at the output.\nIn this way you can use one CV source to amplify, tame, or modulate another.\nRemember that a value of 0 at any input will result in 0 at the output.\nIt's math!",
    defaultBlocks: 3,
    minBlocks: 3,
    maxBlocks: 9,
    params: 2,
    cpu: 0.2,
    blocks: {
      cv_in_1: { initial: true, param: true, position: 0 },
      cv_in_2: { initial: true, param: true, position: 1 },
      cv_in_3: { param: true, position: 2 },
      cv_in_4: { param: true, position: 3 },
      cv_in_5: { param: true, position: 4 },
      cv_in_6: { param: true, position: 5 },
      cv_in_7: { param: true, position: 6 },
      cv_in_8: { param: true, position: 7 },
      cv_out: { initial: true, position: 8 },
    },
    options: { num_inputs: { slot: 0, values: { min: 2, max: 8 } } },
    conditions: { cv_in_3: { type: 'sequential', option: 'num_inputs', startPosition: 2, nameTemplate: 'cv_in_{n}' } },
  },
  {
    id: 23,
    name: 'Compressor',
    display1: 'Comp.',
    category: 'Effect',
    description: "Compression is a vastly useful audio tool that controls your signal level\naccording to changes in input level.\nYou can create natural reductions in gain to help things mix better, help\ntame or enhance transients in synth or instrument signals, etc.\nThe optional stereo side will trigger the module's functions in unison on both\nchannels, creating true stereo compression.",
    defaultBlocks: 3,
    minBlocks: 3,
    maxBlocks: 9,
    params: 4,
    cpu: 3,
    blocks: {
      audio_in_L: { initial: true, position: 0 },
      audio_in_R: { position: 1 },
      threshold: { initial: true, param: true, position: 2 },
      attack: { param: true, position: 3 },
      release: { param: true, position: 4 },
      ratio: { param: true, position: 5 },
      sidechain_in: { position: 8 },
      audio_out_L: { initial: true, position: 6 },
      audio_out_R: { position: 7 },
    },
    options: {
      attack_ctrl: { slot: 0, values: ['off', 'on'] },
      release_ctrl: { slot: 1, values: ['off', 'on'] },
      ratio_ctrl: { slot: 2, values: ['off', 'on'] },
      channels: { slot: 3, values: ['1in->1out', 'stereo'] },
      sidechain: { slot: 4, values: ['internal', 'external'] },
    },
    conditions: {
      audio_in_R: { type: 'value', option: 'channels', value: 'stereo' },
      attack: { type: 'toggle', option: 'attack_ctrl' },
      release: { type: 'toggle', option: 'release_ctrl' },
      ratio: { type: 'toggle', option: 'ratio_ctrl' },
      sidechain_in: { type: 'value', option: 'sidechain', value: 'external' },
      audio_out_R: { type: 'value', option: 'channels', value: 'stereo' },
    },
  },
  {
    id: 24,
    name: 'Multi Filter',
    display1: 'Multi F.',
    category: 'Audio',
    description: 'A general purpose filter with gain, frequency, and Q controls.\nConfigurable as a high pass, low pass, band pass, bell, hi shelf, or low shelf.',
    defaultBlocks: 4,
    minBlocks: 4,
    maxBlocks: 5,
    params: 3,
    cpu: 0.8,
    blocks: {
      audio_in: { initial: true, position: 0 },
      gain: { param: true, position: 1 },
      frequency: { initial: true, param: true, position: 2 },
      q: { initial: true, param: true, position: 3 },
      audio_out: { initial: true, position: 4 },
    },
    options: { filter_shape: { slot: 0, values: ['lowpass', 'hi_shelf', 'bell', 'highpass', 'low_shelf', 'bandpass'] } },
    conditions: {
      gain: {
        type: 'multi',
        operator: 'or',
        conditions: [{ type: 'value', option: 'filter_shape', value: 'bell' }, { type: 'value', option: 'filter_shape', value: 'hi_shelf' }, { type: 'value', option: 'filter_shape', value: 'low_shelf' }],
      },
    },
  },
  {
    id: 25,
    name: 'Plate Reverb',
    display1: 'P. Rev.',
    category: 'Effect',
    description: 'Bask in the ebb and flow of steel molecules as they vibrate with the warm vintage\nvibe of so many classic recordings.',
    defaultBlocks: 8,
    minBlocks: 8,
    maxBlocks: 8,
    params: 4,
    cpu: 22,
    blocks: {
      audio_in_L: { initial: true, position: 0 },
      audio_in_R: { initial: true, position: 1 },
      decay_time: { initial: true, param: true, position: 3 },
      low_eq: { initial: true, param: true, position: 6 },
      high_eq: { initial: true, param: true, position: 7 },
      mix: { initial: true, param: true, position: 2 },
      audio_out_L: { initial: true, position: 4 },
      audio_out_R: { initial: true, position: 5 },
    },
    options: {},
  },
  {
    id: 26,
    name: 'Buffer Delay',
    display1: 'Buf. D.',
    category: 'Audio',
    description: 'Delays internal audio signal by N buffer(s).\nThis module is inaudible, but useful anywhere you need to line up\ninternal parallel audio connections precisely.',
    defaultBlocks: 2,
    minBlocks: 2,
    maxBlocks: 2,
    params: 0,
    cpu: 0.2,
    blocks: { audio_in: { initial: true, position: 0 }, audio_out: { initial: true, position: 1 } },
    options: { buffer_length: { slot: 0, values: { min: 0, max: 16 } } },
  },
  {
    id: 27,
    name: 'All Pass Filter',
    display1: 'AP F.',
    category: 'Audio',
    description: 'All Pass Filter passes through all frequencies at equal gain,\nbut changes phase relationship between them.',
    defaultBlocks: 3,
    minBlocks: 3,
    maxBlocks: 3,
    params: 1,
    cpu: 5,
    blocks: { audio_in: { initial: true, position: 0 }, filter_gain: { initial: true, param: true, position: 1 }, audio_out: { initial: true, position: 2 } },
    options: { num_of_poles: { slot: 0, values: { min: 1, max: 8 } } },
  },
  {
    id: 28,
    name: 'Quantizer',
    display1: 'Quant.',
    category: 'CV',
    description: 'Quantizer will interpret incoming CV and send its nearest equivalent note as a CV output.',
    defaultBlocks: 2,
    minBlocks: 2,
    maxBlocks: 4,
    params: 3,
    cpu: 1,
    blocks: { cv_in: { initial: true, param: true, position: 0 }, key: { param: true, position: 2 }, scale: { param: true, position: 3 }, cv_out: { initial: true, position: 1 } },
    options: { key_scale_jacks: { slot: 0, values: ['no', 'yes'] }, scales: { slot: 1, values: ['basic', 'extended'] } },
    conditions: { key: { type: 'toggle', option: 'key_scale_jacks' }, scale: { type: 'toggle', option: 'key_scale_jacks' } },
  },
  {
    id: 29,
    name: 'Phaser',
    category: 'Effect',
    description: 'Set to stun, Phaser shifts the phase over a set quantity of stages and\nsweeps the frequency of these poles at a set rate.\nAn optional stereo channel rounds out the list of features.',
    defaultBlocks: 6,
    minBlocks: 6,
    maxBlocks: 8,
    params: 4,
    cpu: 15,
    blocks: {
      audio_in_L: { initial: true, position: 0 },
      audio_in_R: { position: 1 },
      rate: { initial: true, param: true, position: 3 },
      tap_tempo_in: { param: true, position: 7 },
      control_in: { param: true, position: 8 },
      resonance: { initial: true, param: true, position: 4 },
      width: { initial: true, param: true, position: 9 },
      mix: { initial: true, param: true, position: 2 },
      audio_out_L: { initial: true, position: 5 },
      audio_out_R: { position: 6 },
    },
    options: { channels: { slot: 0, values: ['1in->1out', '1in->2out', '2in->2out'] }, control: { slot: 1, values: ['rate', 'tap_tempo', 'cv_direct'] }, number_of_stages: { slot: 2, values: [4, 2, 1, 3, 6, 8] } },
    conditions: {
      audio_in_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: '2in->2out' }] },
      tap_tempo_in: { type: 'value', option: 'control', value: 'tap_tempo' },
      control_in: { type: 'value', option: 'control', value: 'cv_direct' },
      audio_out_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: '1in->2out' }, { type: 'value', option: 'channels', value: '2in->2out' }] },
    },
  },
  {
    id: 30,
    name: 'Looper',
    category: 'Audio',
    description: 'The Looper module allows you to record, overdub, and play back incoming audio,\nforwards or backwards, at the speed of your choice (pitch shifted).\nGet loopy!',
    defaultBlocks: 5,
    minBlocks: 5,
    maxBlocks: 10,
    params: 6,
    cpu: 3,
    blocks: {
      audio_in: { initial: true, position: 0 },
      record: { initial: true, param: true, position: 1 },
      restart_playback: { initial: true, param: true, position: 2 },
      stop_play: { param: true, position: 9 },
      speed_pitch: { initial: true, param: true, position: 3 },
      start_position: { param: true, position: 4 },
      loop_length: { param: true, position: 5 },
      reverse_playback: { param: true, position: 7 },
      reset: { param: true, position: 8 },
      audio_out: { initial: true, position: 6 },
    },
    options: {
      max_rec_time: { slot: 0, values: ['1s', '2s', '4s', '8s', '16s', '32s'] },
      length_edit: { slot: 1, values: ['off', 'on'] },
      playback: { slot: 2, values: ['once', 'loop'] },
      length: { slot: 3, values: ['fixed', 'pre_speed'] },
      hear_while_rec: { slot: 4, values: ['no', 'yes'] },
      play_reverse: { slot: 5, values: ['no', 'yes'] },
      overdub: { slot: 6, values: ['no', 'yes'] },
      stop_play_button: { slot: 7, values: ['no', 'yes'] },
    },
    conditions: {
      stop_play: { type: 'toggle', option: 'stop_play_button' },
      start_position: { type: 'toggle', option: 'length_edit' },
      loop_length: { type: 'toggle', option: 'length_edit' },
      reverse_playback: { type: 'toggle', option: 'play_reverse' },
      reset: { type: 'toggle', option: 'overdub' },
    },
  },
  {
    id: 31,
    name: 'In Switch',
    display1: 'In Sw.',
    category: 'CV',
    description: 'In Switch takes a selected quantity of CV inputs and allows you\nto switch between them to a single CV output.\nYou can use this to select between LFOs to a CV source, external CV modules,\nor use in conjunction with the CV out switch to choose between ADSRs\nor other CV module chains',
    defaultBlocks: 3,
    minBlocks: 3,
    maxBlocks: 18,
    params: 17,
    cpu: 0.2,
    blocks: {
      cv_in_1: { initial: true, param: true, position: 0 },
      cv_in_2: { param: true, position: 1 },
      cv_in_3: { param: true, position: 2 },
      cv_in_4: { param: true, position: 3 },
      cv_in_5: { param: true, position: 4 },
      cv_in_6: { param: true, position: 5 },
      cv_in_7: { param: true, position: 6 },
      cv_in_8: { param: true, position: 7 },
      cv_in_9: { param: true, position: 8 },
      cv_in_10: { param: true, position: 9 },
      cv_in_11: { param: true, position: 10 },
      cv_in_12: { param: true, position: 11 },
      cv_in_13: { param: true, position: 12 },
      cv_in_14: { param: true, position: 13 },
      cv_in_15: { param: true, position: 14 },
      cv_in_16: { param: true, position: 15 },
      in_select: { initial: true, param: true, position: 16 },
      cv_out: { initial: true, position: 17 },
    },
    options: { num_inputs: { slot: 0, values: { min: 1, max: 16 } } },
    conditions: { cv_in_2: { type: 'sequential', option: 'num_inputs', startPosition: 1, nameTemplate: 'cv_in_{n}' } },
  },
  {
    id: 32,
    name: 'Out Switch',
    display1: 'Out Sw.',
    category: 'CV',
    description: 'Out Switch takes a CV input and routes it between a set quantity of CV outputs.\nYou can use it to select which sequencers, ADSRs, or tap tempos to send triggers to, etc',
    defaultBlocks: 3,
    minBlocks: 3,
    maxBlocks: 18,
    params: 2,
    cpu: 0.2,
    blocks: {
      cv_in: { initial: true, param: true, position: 0 },
      out_select: { initial: true, param: true, position: 1 },
      cv_out_1: { initial: true, position: 2 },
      cv_out_2: { position: 3 },
      cv_out_3: { position: 4 },
      cv_out_4: { position: 5 },
      cv_out_5: { position: 6 },
      cv_out_6: { position: 7 },
      cv_out_7: { position: 8 },
      cv_out_8: { position: 9 },
      cv_out_9: { position: 10 },
      cv_out_10: { position: 11 },
      cv_out_11: { position: 12 },
      cv_out_12: { position: 13 },
      cv_out_13: { position: 14 },
      cv_out_14: { position: 15 },
      cv_out_15: { position: 16 },
      cv_out_16: { position: 17 },
    },
    options: { num_outs: { slot: 0, values: { min: 1, max: 16 } } },
    conditions: { cv_out_2: { type: 'sequential', option: 'num_outs', startPosition: 3, nameTemplate: 'cv_out_{n}' } },
  },
  {
    id: 33,
    name: 'Audio In Switch',
    display1: 'A. In Sw.',
    category: 'Audio',
    description: "Audio In Switch takes a selected quantity of audio inputs and allows you\nto switch between them to a single output.\nYou can use this to select between instruments at your input jacks,\nuse it in conjunction with the Audio Out Switch to select between\neffects chains, or use it anywhere you'd like to be able to select\nbetween incoming audio sources using CV.",
    defaultBlocks: 3,
    minBlocks: 3,
    maxBlocks: 18,
    params: 1,
    cpu: 0.8,
    blocks: {
      audio_in_1: { initial: true, position: 0 },
      audio_in_2: { position: 1 },
      audio_in_3: { position: 2 },
      audio_in_4: { position: 3 },
      audio_in_5: { position: 4 },
      audio_in_6: { position: 5 },
      audio_in_7: { position: 6 },
      audio_in_8: { position: 7 },
      audio_in_9: { position: 8 },
      audio_in_10: { position: 9 },
      audio_in_11: { position: 10 },
      audio_in_12: { position: 11 },
      audio_in_13: { position: 12 },
      audio_in_14: { position: 13 },
      audio_in_15: { position: 14 },
      audio_in_16: { position: 15 },
      in_select: { initial: true, param: true, position: 16 },
      audio_out: { initial: true, position: 17 },
    },
    options: { num_inputs: { slot: 0, values: { min: 1, max: 16 } }, fades: { slot: 1, values: ['on', 'off'] } },
    conditions: { audio_in_2: { type: 'sequential', option: 'num_inputs', startPosition: 1, nameTemplate: 'audio_in_{n}' } },
  },
  {
    id: 34,
    name: 'Audio Out Switch',
    display1: 'A. Out Sw.',
    category: 'Audio',
    description: "Audio Out Switch takes an audio input and routes it between a set\nquantity of audio outputs.\nYou can use it at your output jacks to select between amplifiers\nor mixer channels, use it in conjunction with the Audio In Switch to\nselect between effects chains, or use it anywhere you'd like to be able\nto select an outgoing audio path using CV.",
    defaultBlocks: 3,
    minBlocks: 3,
    maxBlocks: 18,
    params: 1,
    cpu: 0.7,
    blocks: {
      audio_in: { initial: true, position: 0 },
      in_select: { initial: true, param: true, position: 1 },
      audio_out_1: { initial: true, position: 2 },
      audio_out_2: { position: 3 },
      audio_out_3: { initial: true, position: 4 },
      audio_out_4: { position: 5 },
      audio_out_5: { initial: true, position: 6 },
      audio_out_6: { position: 7 },
      audio_out_7: { initial: true, position: 8 },
      audio_out_8: { position: 9 },
      audio_out_9: { initial: true, position: 10 },
      audio_out_10: { position: 11 },
      audio_out_11: { initial: true, position: 12 },
      audio_out_12: { position: 13 },
      audio_out_13: { initial: true, position: 14 },
      audio_out_14: { position: 15 },
      audio_out_15: { initial: true, position: 16 },
      audio_out_16: { position: 17 },
    },
    options: { num_outs: { slot: 0, values: { min: 1, max: 16 } }, fades: { slot: 1, values: ['on', 'off'] } },
    conditions: { audio_out_2: { type: 'sequential', option: 'num_outs', startPosition: 3, nameTemplate: 'audio_out_{n}' } },
  },
  {
    id: 35,
    name: 'Midi Pressure',
    display1: 'Pres.',
    category: 'Interface',
    description: "Many MIDI keyboards have an aftertouch feature that can be triggered\nby pressing down on a note after it's fully depressed.\nYou can use after touch to trigger a little extra pizazz in your sound.",
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 0,
    cpu: 0.03,
    blocks: { channel_pressure: { initial: true, position: 0 } },
    options: { midi_channel: { slot: 0, values: { min: 1, max: 16 } } },
  },
  {
    id: 36,
    name: 'Onset Detector',
    display1: 'Ons. D.',
    category: 'Analysis',
    description: 'Onset Detector looks for incoming audio signal and generates a CV trigger at the peaks.\nUse a regular audio source to advance a sequencer, tap a tempo, etc',
    defaultBlocks: 2,
    minBlocks: 2,
    maxBlocks: 3,
    params: 1,
    cpu: 0.7,
    blocks: { audio_in: { initial: true, position: 0 }, sensitivity: { param: true, position: 1 }, audio_out: { initial: true, position: 2 } },
    options: { sensitivity: { slot: 0, values: ['off', 'on'] } },
    conditions: { sensitivity: { type: 'toggle', option: 'sensitivity' } },
  },
  {
    id: 37,
    name: 'Rhythm',
    display1: 'Rhy.',
    category: 'CV',
    description: 'Rhythm will take an incoming CV signal, interpret it as a series of triggers,\nrecord those triggers and play them back at the output.',
    defaultBlocks: 4,
    minBlocks: 4,
    maxBlocks: 5,
    params: 3,
    cpu: 0.5,
    blocks: {
      rec_start_stop: { initial: true, param: true, position: 0 },
      rhythm_in: { initial: true, param: true, position: 1 },
      play: { initial: true, param: true, position: 2 },
      done_out: { position: 3 },
      rhythm_out: { initial: true, position: 4 },
    },
    options: { done_ctrl: { slot: 0, values: ['on', 'off'] } },
    conditions: { done_out: { type: 'toggle', option: 'done_ctrl' } },
  },
  {
    id: 38,
    name: 'Noise',
    display1: 'Nois.',
    category: 'Audio',
    description: 'Generates white noise from a single button.\nUse the strength of your connection as a level control.\nHelpful in connection with VCAs and ADSRs in creating drum sounds, etc.',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 0,
    cpu: 0.4,
    blocks: { audio_out: { initial: true, position: 0 } },
    options: {},
  },
  {
    id: 39,
    name: 'Random',
    display1: 'Rnd.',
    category: 'CV',
    description: 'Random will generate numbers continuously or when triggered with the option trigger in.\nConnect an LFO to the trigger in to get regularly updated random numbers.\nTry it with a CV in switch to toggle some randomness into  your life.',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 2,
    params: 1,
    cpu: 0.1,
    blocks: { trigger_in: { param: true, position: 0 }, cv_out: { initial: true, position: 1 } },
    options: { output: { slot: 0, values: ['0 to 1', '-1 to 1'] }, new_val_on_trig: { slot: 1, values: ['off', 'on'] } },
    conditions: { trigger_in: { type: 'toggle', option: 'new_val_on_trig' } },
  },
  {
    id: 40,
    name: 'Gate',
    category: 'Effect',
    description: "A standard in studio audio tools, gate can also be used as the key ingredient\nin gated fuzz tones.\nUse it to filter out noise from an audio source, or to cut the end off\nof a reverb's decay, thus creating the classic gated reverb sound.\nMake sure to experiment with the sidechain input!",
    defaultBlocks: 5,
    minBlocks: 3,
    maxBlocks: 8,
    params: 3,
    cpu: 3,
    blocks: {
      audio_in_L: { initial: true, position: 0 },
      audio_in_R: { position: 1 },
      threshold: { initial: true, param: true, position: 2 },
      attack: { param: true, position: 3 },
      release: { param: true, position: 4 },
      sidechain_in: { position: 7 },
      audio_out_L: { initial: true, position: 5 },
      audio_out_R: { position: 6 },
    },
    options: {
      attack_ctrl: { slot: 0, values: ['off', 'on'] },
      release_ctrl: { slot: 1, values: ['off', 'on'] },
      channels: { slot: 2, values: ['1in->1out', 'stereo'] },
      sidechain: { slot: 3, values: ['internal', 'external'] },
    },
    conditions: {
      audio_in_R: { type: 'value', option: 'channels', value: 'stereo' },
      attack: { type: 'toggle', option: 'attack_ctrl' },
      release: { type: 'toggle', option: 'release_ctrl' },
      sidechain_in: { type: 'value', option: 'sidechain', value: 'external' },
      audio_out_R: { type: 'value', option: 'channels', value: 'stereo' },
    },
  },
  {
    id: 41,
    name: 'Tremolo',
    category: 'Effect',
    description: "Up and down, side to side.\nTremolo helps your smile get wide.\nSet speed and depth and tap in a tempo if you like.\nIf you'd like a tremolo effect with more control, try creating one using\nthe VCA or Audio Panner along with LFOs and various other CV tools to get radical!",
    defaultBlocks: 4,
    minBlocks: 4,
    maxBlocks: 6,
    params: 2,
    cpu: 2,
    blocks: {
      audio_in_L: { initial: true, position: 0 },
      audio_in_R: { position: 1 },
      rate: { initial: true, param: true, position: 2 },
      tap_tempo_in: { param: true, position: 3 },
      direct: { param: true, position: 7, sort: 2 },
      depth: { initial: true, param: true, position: 4 },
      audio_out_L: { initial: true, position: 5 },
      audio_out_R: { position: 6 },
    },
    options: {
      channels: { slot: 0, values: ['1in->1out', '1in->2out', '2in->2out'] },
      control: { slot: 1, values: ['rate', 'tap_tempo', 'cv_direct'] },
      waveform: { slot: 2, values: ['fender-ish', 'vox-ish', 'triangle', 'sine', 'square'] },
    },
    conditions: {
      audio_in_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: '2in->2out' }] },
      rate: { type: 'value', option: 'control', value: 'rate' },
      tap_tempo_in: { type: 'value', option: 'control', value: 'tap_tempo' },
      direct: { type: 'value', option: 'control', value: 'cv_direct' },
      audio_out_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: '1in->2out' }, { type: 'value', option: 'channels', value: '2in->2out' }] },
    },
  },
  {
    id: 42,
    name: 'Tone Control',
    category: 'Effect',
    description: 'Tone Control is a 3 or 4 band tone control.\nUse this in conjunction with Distortion, Delay w/Mod, Reverb, or even\na clean sound to fundamentally change its character.',
    defaultBlocks: 6,
    minBlocks: 6,
    maxBlocks: 10,
    params: 6,
    cpu: 5,
    blocks: {
      audio_in_L: { initial: true, position: 0 },
      audio_in_R: { position: 1 },
      low_shelf: { initial: true, param: true, position: 2 },
      mid_gain_1: { initial: true, param: true, position: 3 },
      mid_freq_1: { initial: true, param: true, position: 4 },
      mid_gain_2: { param: true, position: 5 },
      mid_freq_2: { param: true, position: 6 },
      high_shelf: { initial: true, param: true, position: 7 },
      audio_out_L: { initial: true, position: 8 },
      audio_out_R: { position: 9 },
    },
    options: { channels: { slot: 0, values: ['1in->1out', 'stereo'] }, num_mid_bands: { slot: 1, values: { min: 1, max: 2 } } },
    conditions: {
      audio_in_R: { type: 'value', option: 'channels', value: 'stereo' },
      mid_gain_2: { type: 'value', option: 'num_mid_bands', value: 2 },
      mid_freq_2: { type: 'value', option: 'num_mid_bands', value: 2 },
      audio_out_R: { type: 'value', option: 'channels', value: 'stereo' },
    },
  },
  {
    id: 43,
    name: 'Delay w Mod',
    display1: 'DwM',
    category: 'Effect',
    description: 'Delay is one of the classic delay effects.\nDelay w/Mod differs from the Delay Line module found in Audio Out in\nthat it runs a dry signal alongside the wet, has a feedback section,\nand a modulation section.\nSet the delay time either by tap or rotary/CV input.\nOptional stereo outputs round out the list of features.\nYou can change the character of the delay effect with the "type"\noption, and/or by setting your mix to wet only, adding tone control\nand other effects to the output, and connecting your audio source\ndirectly to your output (bypassing the delay module) to act as the dry signal.',
    defaultBlocks: 7,
    minBlocks: 7,
    maxBlocks: 9,
    params: 5,
    cpu: 18,
    blocks: {
      audio_in_L: { initial: true, position: 0 },
      audio_in_R: { position: 1 },
      feedback: { initial: true, param: true, position: 3 },
      delay_time: { initial: true, param: true, position: 4, sort: 2.5 },
      tap_tempo_in: { param: true, position: 5, sort: 2.5 },
      mod_rate: { initial: true, param: true, position: 6 },
      mod_depth: { initial: true, param: true, position: 7 },
      mix: { initial: true, param: true, position: 2, sort: 8 },
      audio_out_L: { initial: true, position: 8, sort: 9 },
      audio_out_R: { position: 9, sort: 10 },
    },
    options: {
      channels: { slot: 0, values: ['1in->1out', '1in->2out', '2in->2out'] },
      control: { slot: 1, values: ['rate', 'tap_tempo'] },
      type: { slot: 2, values: ['clean', 'tape', 'old_tape', 'bbd'] },
      tap_ratio: { slot: 3, values: ['1:1', '2:3', '1:2', '1:3', '3:8', '1:4', '3:16', '1:8', '1:16', '1:32'] },
    },
    conditions: {
      audio_in_R: { type: 'value', option: 'channels', value: '2in->2out' },
      delay_time: { type: 'value', option: 'control', value: 'rate' },
      tap_tempo_in: { type: 'value', option: 'control', value: 'tap_tempo' },
      audio_out_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: '1in->2out' }, { type: 'value', option: 'channels', value: '2in->2out' }] },
    },
  },
  {
    id: 44,
    name: 'Stompswitch',
    display1: 'Sto.',
    category: 'Interface',
    description: 'Use this module to connect a stomp switch to other modules.\nThis can be any of ZOIA\'s 3 stomp switches or an external one.\nIf using an external, remember to set it up in the Config Menu.\nOnce placed, the Scroll and Bypass stomp switches must be "switched to"\nby holding them both on together for 2 seconds, this will allow them to\nfunction in the modules instead of as ZOIA\'s main user interface.\nHold again for 2 seconds to switch back.',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 0,
    cpu: 0.1,
    blocks: { cv_out: { initial: true, position: 0 } },
    options: { stompswitch: { slot: 0, values: ['left', 'middle', 'right', 'ext'] }, action: { slot: 1, values: ['momentary', 'latching'] }, normally: { slot: 2, values: ['zero', 'one'] } },
  },
  {
    id: 45,
    name: 'Value',
    display1: 'Val.',
    category: 'CV',
    description: 'Value allows you to connect to multiple modules and adjust their\nparameters simultaneously from one CV adjustment at the input.',
    defaultBlocks: 2,
    minBlocks: 2,
    maxBlocks: 2,
    params: 1,
    cpu: 0.15,
    blocks: { value: { initial: true, param: true, position: 0 }, cv_out: { initial: true, position: 1 } },
    options: { output: { slot: 0, values: ['0 to 1', '-1 to 1'] } },
  },
  {
    id: 46,
    name: 'CV Delay',
    category: 'CV',
    description: 'CV Delay will take incoming CV and delay it in time by a set amount.',
    defaultBlocks: 3,
    minBlocks: 3,
    maxBlocks: 3,
    params: 2,
    cpu: 1.5,
    blocks: { cv_in: { initial: true, param: true, position: 0 }, delay_time: { initial: true, param: true, position: 1 }, cv_out: { initial: true, position: 2 } },
    options: { cv_in: { slot: 0, values: ['exponent', 'linear'] } },
  },
  {
    id: 47,
    name: 'CV Loop',
    category: 'CV',
    description: 'CV Loop functions similar to an audio looper except records patterns\nof CV signal instead of audio.\nYou can record and play back snippets of LFOs, sequences, changes in CV\nor MIDI control etc.',
    defaultBlocks: 6,
    minBlocks: 6,
    maxBlocks: 8,
    params: 7,
    cpu: 0.1,
    blocks: {
      cv_in: { initial: true, param: true, position: 0 },
      record: { initial: true, param: true, position: 1 },
      play: { initial: true, param: true, position: 2 },
      playback_speed: { initial: true, param: true, position: 3 },
      start_position: { param: true, position: 4 },
      stop_position: { param: true, position: 5 },
      restart_loop: { initial: true, param: true, position: 6 },
      cv_out: { initial: true, position: 7 },
    },
    options: { max_rec_time: { slot: 0, values: { min: 1, max: 16 } }, length_edit: { slot: 1, values: ['off', 'on'] } },
    conditions: { start_position: { type: 'toggle', option: 'length_edit' }, stop_position: { type: 'toggle', option: 'length_edit' } },
  },
  {
    id: 48,
    name: 'CV Filter',
    category: 'CV',
    description: 'CV Filter dictates the length of time a CV output will take to\nrespond to a change in CV input, determined by the time constant.\nThe CV change occurs logarithmically for a nice smooth transition.\nUse this module in series with a MIDI/keyboard note to add portamento\nto your synth voice.\nYou can also use this module to vary the shape of an LFO waveform or connect\nto a stomp switch to produce a long slow change in an audio effect.',
    defaultBlocks: 3,
    minBlocks: 3,
    maxBlocks: 4,
    params: 2,
    cpu: 0.1,
    blocks: {
      cv_in: { initial: true, param: true, position: 0 },
      time_constant: { initial: true, param: true, position: 1 },
      rise_constant: { param: true, position: 3 },
      fall_constant: { param: true, position: 4 },
      cv_out: { initial: true, position: 2 },
    },
    options: { control: { slot: 0, values: ['linked', 'separate'] } },
    conditions: { rise_constant: { type: 'value', option: 'control', value: 'separate' }, fall_constant: { type: 'value', option: 'control', value: 'separate' } },
  },
  {
    id: 49,
    name: 'Clock Divider',
    display1: 'CD',
    category: 'CV',
    description: 'Clock Divider module will detect tempo of incoming CV upward changes,\ndivide it by a user determined ratio, and output CV triggers at the resulting tempo.\nThis can be a handy way of getting a tap tempo from a slightly irregular waveform.',
    defaultBlocks: 5,
    minBlocks: 4,
    maxBlocks: 5,
    params: 4,
    cpu: 0.4,
    blocks: {
      cv_in: { initial: true, param: true, position: 0 },
      reset_in: { initial: true, param: true, position: 1 },
      modifier: { param: true, position: 2 },
      dividend: { initial: true, param: true, position: 4 },
      divisor: { initial: true, param: true, position: 5 },
      cv_out: { initial: true, position: 3 },
    },
    options: { input: { slot: 0, values: ['tap', 'cv_control'] } },
    conditions: { dividend: { type: 'version', version: ['>=', 1] }, divisor: { type: 'version', version: ['>=', 1] }, modifier: { type: 'version', version: ['<', 1] } },
  },
  {
    id: 50,
    name: 'Comparator',
    category: 'CV',
    description: "Comparator is a logic module that will switch CV on if positive input\nis equal to or greater than negative input, and off if positive input is\nless than negative input.\nOff can be defined as 0 or -1 by the output range.\nThis can be useful if you'd like to have something happen, but only above\na certain threshold.",
    defaultBlocks: 3,
    minBlocks: 3,
    maxBlocks: 3,
    params: 2,
    cpu: 0.04,
    blocks: { cv_positive_input: { initial: true, param: true, position: 0 }, cv_negative_input: { initial: true, param: true, position: 1 }, cv_out: { initial: true, position: 2 } },
    options: { output: { slot: 0, values: ['0 to 1', '-1 to 1'] } },
  },
  {
    id: 51,
    name: 'CV Rectify',
    category: 'CV',
    description: 'CV Rectify will interpret incoming CV from -1 to 1 and "flip" the negative\nvalues into positive values equidistant from 0.',
    defaultBlocks: 2,
    minBlocks: 2,
    maxBlocks: 2,
    params: 1,
    cpu: 0.02,
    blocks: { cv_in: { initial: true, param: true, position: 0 }, cv_out: { initial: true, position: 1 } },
    options: {},
  },
  {
    id: 52,
    name: 'Trigger',
    category: 'CV',
    description: 'Creates a very short CV pulse (value of 1) on detection of upward CV input.\nThis is useful in creating a tap tempos from regular or irregular CV waveforms,\ntriggering sequencers or ADSRs at specific times, etc.',
    defaultBlocks: 2,
    minBlocks: 2,
    maxBlocks: 2,
    params: 1,
    cpu: 0.1,
    blocks: { cv_in: { initial: true, param: true, position: 0 }, cv_out: { initial: true, position: 1 } },
    options: {},
  },
  {
    id: 53,
    name: 'Stereo Spread',
    category: 'Audio',
    description: 'Stereo Spread will take one or two channels and enhance their stereo field.\nThis is generally used right before an audio output module but, as always,\nfeel free to experiment!',
    defaultBlocks: 5,
    minBlocks: 4,
    maxBlocks: 5,
    params: 1,
    cpu: 2,
    blocks: {
      audio_in_1: { initial: true, position: 0 },
      audio_in_2: { position: 1 },
      side_gain: { param: true, position: 2 },
      delay_time: { initial: true, param: true, position: 3 },
      audio_out_1: { initial: true, position: 4 },
      audio_out_2: { initial: true, position: 5 },
    },
    options: { method: { slot: 0, values: ['mid_side', 'haas'] } },
    conditions: { audio_in_2: { type: 'value', option: 'method', value: 'mid_side' }, side_gain: { type: 'value', option: 'method', value: 'mid_side' } },
  },
  {
    id: 54,
    name: 'CPort Exp CV In',
    display1: 'CPI',
    category: 'Interface',
    description: 'Connect your expression pedal or a control voltage signal from an external source.\nRemember to set CPort to either exp or cv in the Config Menu.',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 0,
    cpu: 0.1,
    blocks: { cv_out: { initial: true, position: 0 } },
    options: { output_range: { slot: 0, values: ['0 to 1', '-1 to 1'] } },
  },
  {
    id: 55,
    name: 'CPort CV Out',
    display1: 'CPO',
    category: 'Interface',
    description: 'This module interprets internal CV and sends it down the ring of a 1/4"\nTRS connector in the control port as a standard CV signal of 0-5 volts.\nRemember to set CPort to cv in the Config Menu.',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 0,
    cpu: 0.2,
    blocks: { cv_in: { initial: true, param: true, position: 0 } },
    options: { input_range: { slot: 0, values: ['0 to 1', '-1 to 1'] } },
  },
  {
    id: 56,
    name: 'UI Button',
    display1: 'UI B.',
    category: 'Interface',
    description:
      'UI Button can function in a couple different ways.\nIt can show you a specific colour at a specific brightness based on the\nsetting of or CV sent to the input.\nIt can also act as a pushbutton with output enabled.\nTo use as a visualizing pixel, connect CV and send the following values:\nEXTENDED RANGE:\nRed: 0 - 0.049 (max bright 0.0375),\nOrange: 0.05 - 0.099 (max bright 0.0875),\nMango: 0.10 - 0.149 (max bright 0.1375),\nYellow: 0.15 - 0.199 (max bright 0.1875),\nLime: 0.20 - 0.249 (max bright 0.2375),\nGreen: 0.25 - 0.299 (max bright 0.2875),\nSurf: 0.30 - 0.349 (max bright 0.3375),\nAqua: 0.35 - 0.399 (max bright 0.3875),\nSky: 0.40 - 0.449 (max bright 0.4375),\nBlue: 0.45 - 0.499 (max bright 0.4875),\nPurple: 0.50 - 0.549 (max bright 0.5375),\nMagenta: 0.55 - 0.599 (max bright 0.5875),\nPink: 0.60 - 0.649 (max bright 0.6375),\nPeach: 0.65 - 0.699 (max bright 0.6875),\nWhite: 0.70 - 0.749 (max bright 0.7375).\nBASIC RANGE:\nBlue = 0 to 0.099 (0.74 max brightness),\nGreen = 0.1 to 0.199 (0.174 max brightness),\nRed = 0.2 to 0.299 (0.274 max brightness),\nYellow = 0.3 to 0.399 (0.374 max brightness),\nCyan = 0.4 to 0.499 (0.474 max brightness),\nMagenta = 0.5 to 0.599 (0.574 max brightness),\nWhite = 0.6 to 0.699 (0.6 to 0.674 brightness).',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 2,
    params: 1,
    cpu: 0.04,
    blocks: { 'in': { initial: true, param: true, position: 0 }, cv_out: { position: 1 } },
    options: { cv_out: { slot: 0, values: ['disabled', 'enabled'] }, range: { slot: 1, values: ['basic', 'extended'] } },
    conditions: { cv_out: { type: 'value', option: 'cv_out', value: 'enabled' } },
  },
  {
    id: 57,
    name: 'Audio Panner',
    category: 'Audio',
    description: 'Audio Panner takes either one or two input channels and pans them between two outputs.\nConnect an LFO for a stereo tremolo effect.',
    defaultBlocks: 4,
    minBlocks: 4,
    maxBlocks: 5,
    params: 3,
    cpu: 1,
    blocks: {
      audio_in_L: { initial: true, position: 0 },
      audio_in_R: { position: 1 },
      pan: { initial: true, param: true, position: 2 },
      audio_out_L: { initial: true, position: 3 },
      audio_out_R: { initial: true, position: 4 },
    },
    options: { channels: { slot: 0, values: ['1in->2out', '2in->2out'] }, pan_type: { slot: 1, values: ['equal_pwr', '-4.5dB', 'linear'] } },
    conditions: { audio_in_R: { type: 'value', option: 'channels', value: '2in->2out' } },
  },
  {
    id: 58,
    name: 'Pitch Detector',
    display: 'Pitch Det.',
    category: 'Analysis',
    description: 'Pitch Detector interprets the pitch of a connected audio signal as a CV note output,\nwhich can be sent to an oscillator or quantizer.\nYou can affect the tracking by changing the connection strength between\nthe audio source and the audio input, and transpose which note the oscillator\nwill generate using the connection strength to the oscillator.\nClick knob to toggle display between frequency in Hz and note.',
    defaultBlocks: 2,
    minBlocks: 2,
    maxBlocks: 2,
    params: 0,
    cpu: 2.5,
    blocks: { audio_in: { initial: true, position: 0 }, cv_out: { initial: true, position: 1 } },
    options: {},
  },
  {
    id: 59,
    name: 'Pitch Shifter',
    display1: 'P. Sh.',
    category: 'Audio',
    description: "Pitch Shifter transposes the pitch of incoming audio.\nClick the knob on the pitch shift parameter to cycle views of\nCV value, semitones, or cents.\nConnect an LFO to produce a vibrato effect, or connect whatever you'd like!",
    defaultBlocks: 3,
    minBlocks: 3,
    maxBlocks: 3,
    params: 1,
    cpu: 15.5,
    blocks: { audio_in: { initial: true, position: 0 }, pitch_shift: { initial: true, param: true, position: 1 }, audio_out: { initial: true, position: 2 } },
    options: {},
  },
  {
    id: 60,
    name: 'Midi Note Out',
    display: 'M. Note Out',
    category: 'Interface',
    description: "Send MIDI notes out to external MIDI enabled gear through ZOIA's MIDI outputs.",
    defaultBlocks: 2,
    minBlocks: 2,
    maxBlocks: 3,
    params: 3,
    cpu: 0.1,
    blocks: { note_in: { initial: true, param: true, position: 0 }, gate_in: { initial: true, param: true, position: 1 }, velocity_in: { param: true, position: 2 } },
    options: { midi_channel: { slot: 0, values: { min: 1, max: 16 } }, velocity_out: { slot: 1, values: ['off', 'on'] } },
    conditions: { velocity_in: { type: 'toggle', option: 'velocity_out' } },
  },
  {
    id: 61,
    name: 'Midi CC Out',
    display1: 'CCO',
    display: 'M. CC Out',
    category: 'Interface',
    description: "Send Control Change messages to external MIDI enabled gear through ZOIA's MIDI outputs.",
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 1,
    cpu: 0.2,
    blocks: { cc: { initial: true, param: true, position: 0 } },
    options: { midi_channel: { slot: 0, values: { min: 1, max: 16 } }, controller: { slot: 1, values: { min: 0, max: 127 } } },
  },
  {
    id: 62,
    name: 'Midi PC Out',
    display: 'M. PC Out',
    category: 'Interface',
    description: "Send Program Change messages to external MIDI enabled gear.\nSelect the Program Change value and send a CV signal to trigger\nin to send message through ZOIA's MIDI outputs.",
    defaultBlocks: 2,
    minBlocks: 2,
    maxBlocks: 2,
    params: 2,
    cpu: 0.1,
    blocks: { pc: { initial: true, param: true, position: 0 }, trigger_in: { initial: true, param: true, position: 1 } },
    options: { midi_channel: { slot: 0, values: { min: 1, max: 16 } } },
  },
  {
    id: 63,
    name: 'Bit Modulator',
    category: 'Audio',
    description: 'Bit Modulator takes one audio input and compares it against the other,\ncreating an unholy glitchy combination of both sounds at the output.\nChoose between 3 different logic flavours with the "type" option.\nWhen taking audio from an external source, it\'s recommended to put a gate before the input.',
    defaultBlocks: 3,
    minBlocks: 3,
    maxBlocks: 3,
    params: 0,
    cpu: 1.2,
    blocks: { audio_in_1: { initial: true, position: 0 }, audio_in_2: { initial: true, position: 1 }, audio_out: { initial: true, position: 2 } },
    options: { type: { slot: 0, values: ['xor', 'and', 'or'] } },
  },
  {
    id: 64,
    name: 'Audio Balance',
    category: 'Audio',
    description: 'Audio Balance mixes an output from 2 inputs.\nYou can run this module either mono or stereo.',
    defaultBlocks: 4,
    minBlocks: 4,
    maxBlocks: 7,
    params: 1,
    cpu: 1.7,
    blocks: {
      audio_in_1_L: { position: 0 },
      audio_in_1_R: { position: 1 },
      audio_in_2_L: { position: 4, sort: 1.1 },
      audio_in_2_R: { position: 5, sort: 1.2 },
      mix: { initial: true, param: true, position: 2 },
      audio_out_L: { initial: true, position: 3 },
      audio_out_R: { position: 6 },
      audio_in_1: { initial: true, position: 0 },
      audio_in_2: { initial: true, position: 1 },
      audio_out: { initial: true, position: 3 },
    },
    options: { stereo: { slot: 0, values: ['mono', 'stereo'] } },
    conditions: {
      audio_in_1_L: { type: 'value', option: 'stereo', value: 'stereo' },
      audio_in_1_R: { type: 'value', option: 'stereo', value: 'stereo' },
      audio_in_2_L: { type: 'value', option: 'stereo', value: 'stereo' },
      audio_in_2_R: { type: 'value', option: 'stereo', value: 'stereo' },
      audio_out_L: { type: 'value', option: 'stereo', value: 'stereo' },
      audio_out_R: { type: 'value', option: 'stereo', value: 'stereo' },
      audio_in_1: { type: 'value', option: 'stereo', value: 'mono' },
      audio_in_2: { type: 'value', option: 'stereo', value: 'mono' },
      audio_out: { type: 'value', option: 'stereo', value: 'mono' },
    },
  },
  {
    id: 65,
    name: 'Inverter',
    category: 'Audio',
    description: 'The Inverter module takes incoming audio signal and inverts the\nsound wave 180 degrees out of phase.\nThis module is inaudible unless you have a phase related problem\nyou are trying to solve, in which case it can be very audible.\nBe sure to put a 1 Buffer Delay module into your "dry" side to\nline up the Inverter in time for proper phase cancellation.',
    defaultBlocks: 2,
    minBlocks: 2,
    maxBlocks: 2,
    params: 0,
    cpu: 0.3,
    blocks: { audio_in: { initial: true, position: 0 }, audio_out: { initial: true, position: 1 } },
    options: {},
  },
  {
    id: 66,
    name: 'Fuzz',
    category: 'Effect',
    description: 'The Fuzz module provides gnarly fuzz tones for your sonic enjoyment.',
    defaultBlocks: 4,
    minBlocks: 4,
    maxBlocks: 4,
    params: 2,
    cpu: 16,
    blocks: {
      audio_in: { initial: true, position: 0 },
      input_gain: { initial: true, param: true, position: 1 },
      output_gain: { initial: true, param: true, position: 2 },
      audio_out: { initial: true, position: 3 },
    },
    options: { model: { slot: 0, values: ['efuzzy', 'burly', 'scoopy', 'ugly'] } },
  },
  {
    id: 67,
    name: 'Ghostverb',
    category: 'Effect',
    description: 'A spooky, ghostly reverb sound akin to the Ghost mode found in the Empress Reverb.\nScare the crap out of all your friends!',
    defaultBlocks: 6,
    minBlocks: 6,
    maxBlocks: 8,
    params: 4,
    cpu: 45,
    blocks: {
      audio_in_L: { initial: true, position: 0 },
      audio_in_R: { position: 1 },
      decay_feedback: { initial: true, param: true, position: 2 },
      rate: { initial: true, param: true, position: 3 },
      resonance: { initial: true, param: true, position: 4 },
      mix: { initial: true, param: true, position: 5 },
      audio_out_L: { initial: true, position: 6 },
      audio_out_R: { position: 7 },
    },
    options: { channels: { slot: 0, values: ['1in->1out', '1in->2out', 'stereo'] } },
    conditions: {
      audio_in_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: 'stereo' }] },
      audio_out_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: '1in->2out' }, { type: 'value', option: 'channels', value: 'stereo' }] },
    },
  },
  {
    id: 68,
    name: 'Cabinet Sim',
    category: 'Effect',
    description: 'A versatile guitar cabinet simulator.',
    defaultBlocks: 2,
    minBlocks: 2,
    maxBlocks: 4,
    params: 0,
    cpu: 10,
    blocks: { audio_in_L: { initial: true, position: 0 }, audio_in_R: { position: 1 }, audio_out_L: { initial: true, position: 2 }, audio_out_R: { position: 3 } },
    options: { channels: { slot: 0, values: ['mono', 'stereo', '1in->2out'] }, type: { slot: 1, values: ['4x12_full', '2x12_dark', '2x12_modern', '1x12', '1x8_lofi', '1x12_vintage', '4x12_hifi'] } },
    conditions: {
      audio_in_R: { type: 'value', option: 'channels', value: 'stereo' },
      audio_out_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: 'stereo' }, { type: 'value', option: 'channels', value: '1in->2out' }] },
    },
  },
  {
    id: 69,
    name: 'Flanger',
    category: 'Effect',
    description: "ZOIA's Flanger module is borrowed right from the Empress Nebulus.\nThis quite versatile flanger encompasses lots of comb filtering territory,\nbut don't hesitate to build flange tones yourself using LFOs and delay lines!",
    defaultBlocks: 7,
    minBlocks: 7,
    maxBlocks: 9,
    params: 5,
    cpu: 11,
    blocks: {
      audio_in_L: { initial: true, position: 0 },
      audio_in_R: { position: 1 },
      rate: { initial: true, param: true, position: 2 },
      tap_tempo_in: { param: true, position: 3 },
      direct: { param: true, position: 4 },
      regen: { initial: true, param: true, position: 5 },
      width: { initial: true, param: true, position: 6 },
      tone_tilt_eq: { initial: true, param: true, position: 7 },
      mix: { initial: true, param: true, position: 8 },
      audio_out_L: { initial: true, position: 9 },
      audio_out_R: { position: 10 },
    },
    options: { channels: { slot: 0, values: ['1in->1out', '1in->2out', 'stereo'] }, control: { slot: 1, values: ['rate', 'tap_tempo', 'cv_direct'] }, type: { slot: 2, values: ['1960s', '1970s', 'thru_0'] } },
    conditions: {
      audio_in_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: 'stereo' }] },
      tap_tempo_in: { type: 'value', option: 'control', value: 'tap_tempo' },
      direct: { type: 'value', option: 'control', value: 'cv_direct' },
      audio_out_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: '1in->2out' }, { type: 'value', option: 'channels', value: 'stereo' }] },
    },
  },
  {
    id: 70,
    name: 'Chorus',
    category: 'Effect',
    description: 'The classic chorus effect.\nA nice sounding, fairly standard chorus.\nGet wackier sounds from it by using CV direct, or build\nyour own from LFOs and delay lines!',
    defaultBlocks: 6,
    minBlocks: 6,
    maxBlocks: 8,
    params: 4,
    cpu: 13,
    blocks: {
      audio_in_L: { initial: true, position: 0 },
      audio_in_R: { position: 1 },
      rate: { initial: true, param: true, position: 2 },
      tap_tempo_in: { param: true, position: 3 },
      direct: { param: true, position: 4 },
      width: { initial: true, param: true, position: 5 },
      tone_tilt_eq: { initial: true, param: true, position: 6 },
      mix: { initial: true, param: true, position: 7 },
      audio_out_L: { initial: true, position: 8 },
      audio_out_R: { position: 9 },
    },
    options: { channels: { slot: 0, values: ['1in->1out', '1in->2out', 'stereo'] }, control: { slot: 1, values: ['rate', 'tap_tempo', 'cv_direct'] }, type: { slot: 2, values: ['classic'] } },
    conditions: {
      audio_in_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: 'stereo' }] },
      tap_tempo_in: { type: 'value', option: 'control', value: 'tap_tempo' },
      direct: { type: 'value', option: 'control', value: 'cv_direct' },
      audio_out_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: '1in->2out' }, { type: 'value', option: 'channels', value: 'stereo' }] },
    },
  },
  {
    id: 71,
    name: 'Vibrato',
    category: 'Effect',
    description: "Vibrato is your typical pitch bending, wet only sound you'd find on\nsuch classic units as the Empress Nebulus, just to name one.\nGet bendy!",
    defaultBlocks: 4,
    minBlocks: 4,
    maxBlocks: 6,
    params: 2,
    cpu: 5,
    blocks: {
      audio_in_L: { initial: true, position: 0 },
      audio_in_R: { position: 1 },
      rate: { initial: true, param: true, position: 2 },
      tap_tempo_in: { param: true, position: 3 },
      direct: { param: true, position: 4 },
      width: { initial: true, param: true, position: 5 },
      audio_out_L: { initial: true, position: 6 },
      audio_out_R: { position: 7 },
    },
    options: { channels: { slot: 0, values: ['1in->1out', '1in->2out', 'stereo'] }, control: { slot: 1, values: ['rate', 'tap_tempo', 'cv_direct'] }, waveform: { slot: 2, values: ['sine', 'triangle', 'swung_sine', 'swung'] } },
    conditions: {
      audio_in_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: 'stereo' }] },
      tap_tempo_in: { type: 'value', option: 'control', value: 'tap_tempo' },
      direct: { type: 'value', option: 'control', value: 'cv_direct' },
      audio_out_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: '1in->2out' }, { type: 'value', option: 'channels', value: 'stereo' }] },
    },
  },
  {
    id: 72,
    name: 'Env Filter',
    category: 'Effect',
    description: 'Get your quack on!\nThis fully featured envelope filter has everything you\nneed to tune in that perfect envelope filter and get funky.\nGreat on guitar, bass, or anything else!',
    defaultBlocks: 6,
    minBlocks: 6,
    maxBlocks: 8,
    params: 4,
    cpu: 7,
    blocks: {
      audio_in_L: { initial: true, position: 0 },
      audio_in_R: { position: 1 },
      sensitivity: { initial: true, param: true, position: 2 },
      min_freq: { initial: true, param: true, position: 3 },
      max_freq: { initial: true, param: true, position: 4 },
      filter_q: { initial: true, param: true, position: 5 },
      audio_out_L: { initial: true, position: 6 },
      audio_out_R: { position: 7 },
    },
    options: { channels: { slot: 0, values: ['1in->1out', '1in->2out', 'stereo'] }, filter_type: { slot: 1, values: ['bpf', 'hpf', 'lpf'] }, direction: { slot: 2, values: ['up', 'down'] } },
    conditions: {
      audio_in_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: 'stereo' }] },
      audio_out_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: '1in->2out' }, { type: 'value', option: 'channels', value: 'stereo' }] },
    },
  },
  {
    id: 73,
    name: 'Ring Modulator',
    category: 'Effect',
    description: "A gnarly ring modulation effect.\nA robot's nightmare, a tweaker's delight!",
    defaultBlocks: 4,
    minBlocks: 4,
    maxBlocks: 6,
    params: 3,
    cpu: 14,
    blocks: {
      audio_in: { initial: true, position: 0 },
      frequency: { initial: true, param: true, position: 1 },
      ext_in: { position: 2 },
      duty_cycle: { param: true, position: 3 },
      mix: { initial: true, param: true, position: 4 },
      audio_out: { initial: true, position: 5 },
    },
    options: {
      waveform: { slot: 0, values: ['sine', 'square', 'triangle', 'sawtooth'] },
      ext_audio_in: { slot: 1, values: ['off', 'on'] },
      duty_cycle: { slot: 2, values: ['off', 'on'] },
      upsampling: { slot: 3, values: ['none', '2x'] },
    },
    conditions: { ext_in: { type: 'toggle', option: 'ext_audio_in' }, duty_cycle: { type: 'toggle', option: 'duty_cycle' } },
  },
  {
    id: 74,
    name: 'Hall Reverb',
    category: 'Effect',
    description: "It's like you're there, looking up at the pulpit, with the warm sun\ncasting in beams of coloured light from the stained glass windows.\nYou're in reverb heaven, now.",
    defaultBlocks: 8,
    minBlocks: 8,
    maxBlocks: 8,
    params: 4,
    cpu: 22,
    blocks: {
      audio_in_L: { initial: true, position: 0 },
      audio_in_R: { initial: true, position: 1 },
      decay_time: { initial: true, param: true, position: 2 },
      low_eq: { initial: true, param: true, position: 6 },
      lpf_freq: { initial: true, param: true, position: 7 },
      mix: { initial: true, param: true, position: 3 },
      audio_out_L: { initial: true, position: 4 },
      audio_out_R: { initial: true, position: 5 },
    },
    options: {},
  },
  {
    id: 75,
    name: 'Ping Pong Delay',
    category: 'Effect',
    description: 'Ping Pong Delay is almost identical to the Delay w/ Mod except for one key aspect:\nthe delay repeats ping pong from left to right across stereo outputs.\nWhen stereo inputs are selected, one input will ping while the other pongs,\nfollowed by a pong while the other pings into the opposite and then correct outputs.',
    defaultBlocks: 7,
    minBlocks: 7,
    maxBlocks: 9,
    params: 5,
    cpu: 18,
    blocks: {
      audio_in_L: { initial: true, position: 0 },
      audio_in_R: { position: 1 },
      delay_time: { initial: true, param: true, position: 4, sort: 2 },
      tap_tempo_in: { param: true, position: 5, sort: 2 },
      feedback: { initial: true, param: true, position: 3 },
      mod_rate: { initial: true, param: true, position: 6 },
      mod_depth: { initial: true, param: true, position: 7 },
      mix: { initial: true, param: true, position: 2, sort: 7 },
      audio_out_L: { initial: true, position: 8 },
      audio_out_R: { initial: true, position: 9 },
    },
    options: {
      channels: { slot: 0, values: ['1in->2out', 'stereo'] },
      control: { slot: 1, values: ['rate', 'tap_tempo'] },
      type: { slot: 2, values: ['clean', 'tape', 'old_tape', 'bbd'] },
      tap_ratio: { slot: 3, values: ['1:1', '2:3', '1:2', '1:3', '3:8', '1:4', '3:16', '1:8', '1:16', '1:32'] },
    },
    conditions: {
      audio_in_R: { type: 'value', option: 'channels', value: 'stereo' },
      delay_time: { type: 'value', option: 'control', value: 'rate' },
      tap_tempo_in: { type: 'value', option: 'control', value: 'tap_tempo' },
    },
  },
  {
    id: 76,
    name: 'Audio Mixer',
    category: 'Audio',
    description: 'Audio Mixer functions like a stripped down mixing console,\nwhere gain is your channel fader and you can place an optional pan control.\nMix up to 8 channels, in mono or stereo.',
    defaultBlocks: 5,
    minBlocks: 5,
    maxBlocks: 34,
    params: 16,
    cpu: 7,
    blocks: {
      audio_in_1_L: { initial: true, position: 0 },
      audio_in_1_R: { position: 1 },
      audio_in_2_L: { initial: true, position: 2 },
      audio_in_2_R: { position: 3 },
      audio_in_3_L: { position: 4 },
      audio_in_3_R: { position: 5 },
      audio_in_4_L: { position: 6 },
      audio_in_4_R: { position: 7 },
      audio_in_5_L: { position: 8 },
      audio_in_5_R: { position: 9 },
      audio_in_6_L: { position: 10 },
      audio_in_6_R: { position: 11 },
      audio_in_7_L: { position: 12 },
      audio_in_7_R: { position: 13 },
      audio_in_8_L: { position: 14 },
      audio_in_8_R: { position: 15 },
      gain_1: { initial: true, param: true, position: 16 },
      gain_2: { initial: true, param: true, position: 17 },
      gain_3: { param: true, position: 18 },
      gain_4: { param: true, position: 19 },
      gain_5: { param: true, position: 20 },
      gain_6: { param: true, position: 21 },
      gain_7: { param: true, position: 22 },
      gain_8: { param: true, position: 23 },
      pan_1: { param: true, position: 24 },
      pan_2: { param: true, position: 25 },
      pan_3: { param: true, position: 26 },
      pan_4: { param: true, position: 27 },
      pan_5: { param: true, position: 28 },
      pan_6: { param: true, position: 29 },
      pan_7: { param: true, position: 30 },
      pan_8: { param: true, position: 31 },
      audio_out_L: { initial: true, position: 32 },
      audio_out_R: { position: 33 },
    },
    options: { channels: { slot: 0, values: { min: 2, max: 8 } }, stereo: { slot: 1, values: ['mono', 'stereo'] }, panning: { slot: 2, values: ['off', 'on'] } },
    conditions: {
      audio_in_1_L: { type: 'sequential', option: 'channels', startPosition: 0, nameTemplate: 'audio_in_{n}_L' },
      audio_in_1_R: { type: 'sequential', option: 'channels', startPosition: 1, nameTemplate: 'audio_in_{n}_R', condition: { type: 'value', option: 'stereo', value: 'stereo' } },
      gain_1: { type: 'sequential', option: 'channels', startPosition: 16, nameTemplate: 'gain_{n}' },
      pan_1: { type: 'sequential', option: 'channels', startPosition: 24, nameTemplate: 'pan_{n}', condition: { type: 'toggle', option: 'panning' } },
      audio_out_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'stereo', value: 'stereo' }, { type: 'toggle', option: 'panning' }] },
    },
  },
  {
    id: 77,
    name: 'CV Flip Flop',
    category: 'CV',
    description: "This is essentially a latching CV switch with an output of 0 or 1.\nWhen the input sees an upward CV change, the flip flop is triggered to\nchange it's output state from 0 to 1 at the next upward change in CV,\nwhich must occur after a downward change in CV.\nSo, the flip flop changes from 0 to 1 at every other upward change in CV.",
    defaultBlocks: 2,
    minBlocks: 2,
    maxBlocks: 2,
    params: 1,
    cpu: 0.2,
    blocks: { cv_in: { initial: true, param: true, position: 0 }, cv_out: { initial: true, position: 1 } },
    options: {},
  },
  {
    id: 78,
    name: 'Diffuser',
    category: 'Audio',
    description: "Diffuser spreads your signal across the galaxy like so many shimmering little stars.\nOn it's own it sounds like a modulated slapback delay with no dry signal,\nbut it can be used to construct many a tonal/atonal masterpiece.",
    defaultBlocks: 6,
    minBlocks: 6,
    maxBlocks: 6,
    params: 4,
    cpu: 2,
    blocks: {
      audio_in: { initial: true, position: 0 },
      gain: { initial: true, param: true, position: 1 },
      size: { initial: true, param: true, position: 2 },
      mod_width: { initial: true, param: true, position: 3 },
      mod_rate: { initial: true, param: true, position: 4 },
      audio_out: { initial: true, position: 5 },
    },
    options: {},
  },
  {
    id: 79,
    name: 'Reverb Lite',
    category: 'Effect',
    description: 'A straightforward CPU friendly reverb sound to add some smoosh to heavier workload patches.',
    defaultBlocks: 4,
    minBlocks: 4,
    maxBlocks: 6,
    params: 2,
    cpu: 10,
    blocks: {
      audio_in_L: { initial: true, position: 0 },
      audio_in_R: { position: 1 },
      decay_time: { initial: true, param: true, position: 2 },
      mix: { initial: true, param: true, position: 3 },
      audio_out_L: { initial: true, position: 4 },
      audio_out_R: { position: 5 },
    },
    options: { channels: { slot: 0, values: ['1in->1out', '1in->2out', 'stereo'] } },
    conditions: {
      audio_in_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: 'stereo' }] },
      audio_out_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: '1in->2out' }, { type: 'value', option: 'channels', value: 'stereo' }] },
    },
  },
  {
    id: 80,
    name: 'Room Reverb',
    category: 'Effect',
    description: "Well, you're cooped up in your little room.\nBut that's okay, because you've got some tasty room reverb to swim around in.\nDon't worry, somebody will come get you out someday.",
    defaultBlocks: 8,
    minBlocks: 8,
    maxBlocks: 8,
    params: 4,
    cpu: 22,
    blocks: {
      audio_in_L: { initial: true, position: 0 },
      audio_in_R: { initial: true, position: 1 },
      decay_time: { initial: true, param: true, position: 2 },
      low_eq: { initial: true, param: true, position: 3 },
      lpf_freq: { initial: true, param: true, position: 4 },
      mix: { initial: true, param: true, position: 5 },
      audio_out_L: { initial: true, position: 6 },
      audio_out_R: { initial: true, position: 7 },
    },
    options: {},
  },
  {
    id: 81,
    name: 'Pixel',
    display1: 'PX',
    category: 'Interface',
    description: 'Puts a coloured block on the grid.\nThe brightness can be controlled by a cv signal or an audio signal.\nPixel is a simple, elegant way to create a more visually\ninteractive user interface for your patch.',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 1,
    cpu: 0.01,
    blocks: { cv_in: { initial: true, param: true, position: 0 }, audio_in: { position: 1 } },
    options: { control: { slot: 0, values: ['cv', 'audio'] } },
    conditions: { cv_in: { type: 'value', option: 'control', value: 'cv' }, audio_in: { type: 'value', option: 'control', value: 'audio' } },
  },
  {
    id: 82,
    name: 'Midi Clock In',
    display1: 'MCI',
    category: 'Interface',
    description: 'Connect MIDI clock to sync your patches to the outside world.',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 4,
    params: 0,
    cpu: 0.1,
    blocks: { quarter_out: { initial: true, position: 0 }, clock_out: { position: 1 }, reset_out: { position: 2 }, run_out: { position: 3 } },
    options: {
      clock_out: { slot: 0, values: ['disabled', 'enabled'] },
      divider: { slot: 1, values: ['disabled', 'enabled'] },
      run_out: { slot: 2, values: ['disabled', 'enabled'] },
      beat_modifier: { slot: 3, values: ['1', '2', '3', '4', '6', '12', '1/12', '1/6', '1/4', '1/3', '1/2'] },
    },
    conditions: { clock_out: { type: 'toggle', option: 'clock_out' }, reset_out: { type: 'toggle', option: 'divider' }, run_out: { type: 'toggle', option: 'run_out' } },
  },
  {
    id: 83,
    name: 'Granular',
    display1: 'Gran.',
    category: 'Audio',
    description: 'Granular breaks up incoming audio into tiny little grains and\nspits them back out in the quantity and shape of your choosing.\nGo from modest textures to completely unrecognizable oscillations.\nGranular can also be used as a granular delay by creating a feedback\npath from the output back to the input...',
    defaultBlocks: 8,
    minBlocks: 8,
    maxBlocks: 10,
    params: 6,
    cpu: 8,
    blocks: {
      audio_in_L: { initial: true, position: 0 },
      audio_in_R: { position: 1 },
      grain_size: { initial: true, param: true, position: 2 },
      grain_position: { initial: true, param: true, position: 3 },
      density: { initial: true, param: true, position: 4 },
      texture: { initial: true, param: true, position: 5 },
      speed_pitch: { initial: true, param: true, position: 6 },
      freeze: { initial: true, param: true, position: 7 },
      audio_out_L: { initial: true, position: 8 },
      audio_out_R: { position: 9 },
    },
    options: {
      num_grains: { slot: 0, values: { min: 1, max: 8 } },
      channels: { slot: 1, values: ['mono', 'stereo'] },
      pos_control: { slot: 2, values: ['cv', 'tap_tempo'] },
      size_control: { slot: 3, values: ['cv', 'tap_tempo'] },
    },
    conditions: { audio_in_R: { type: 'value', option: 'channels', value: 'stereo' }, audio_out_R: { type: 'value', option: 'channels', value: 'stereo' } },
  },
  {
    id: 84,
    name: 'Midi Clock Out',
    display1: 'MCO',
    category: 'Interface',
    description: "Generate MIDI clock to sync outside devices to your ZOIA.\nClock sends directly to ZOIA's MIDI output.",
    defaultBlocks: 3,
    minBlocks: 1,
    maxBlocks: 5,
    params: 5,
    cpu: 0.3,
    blocks: {
      tap_cv_control: { initial: true, param: true, position: 0 },
      sent: { initial: true, param: true, position: 1 },
      reset: { initial: true, param: true, position: 2 },
      send_position: { param: true, position: 3 },
      song_position: { param: true, position: 4 },
    },
    options: {
      input: { slot: 0, values: ['tap', 'cv_control'] },
      run_in: { slot: 1, values: ['enabled', 'disabled'] },
      reset_in: { slot: 2, values: ['enabled', 'disabled'] },
      position: { slot: 3, values: ['disabled', 'enabled'] },
    },
    conditions: { send_position: { type: 'toggle', option: 'position' }, song_position: { type: 'toggle', option: 'position' } },
  },
  {
    id: 85,
    name: 'Tap to CV',
    category: 'CV',
    description: 'Outputs a CV value proportional to the tap tempo input.',
    defaultBlocks: 2,
    minBlocks: 2,
    maxBlocks: 4,
    params: 2,
    cpu: 0.12,
    blocks: { tap_input: { initial: true, position: 0 }, min_time: { param: true, position: 1 }, max_time: { param: true, position: 2 }, output: { initial: true, position: 3 } },
    options: { range: { slot: 0, values: ['off', 'on'] }, output: { slot: 1, values: ['linear', 'exponential'] } },
    conditions: { min_time: { type: 'toggle', option: 'range' }, max_time: { type: 'toggle', option: 'range' } },
  },
  {
    id: 86,
    name: 'Midi Pitch Bend In',
    display1: 'PBI',
    category: 'Interface',
    description: 'Collects MIDI data from pitch bend wheel on keyboards,\ncan be applied to oscillator frequency in parallel with MIDI note data,\nor used in other ways.',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 0,
    cpu: 0.1,
    blocks: { pitch_bend: { initial: true, position: 0 } },
    options: { midi_channel: { slot: 0, values: { min: 1, max: 16 } } },
  },
  {
    id: 87,
    zebu: true,
    name: 'Euro CV Out 4',
    display1: 'CO4',
    category: 'Interface',
    description: '',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 1,
    cpu: 0.1,
    blocks: { cv_in: { initial: true, param: true, position: 0 } },
    options: { out_range: { slot: 0, values: ['0 to 10V', '0 to 5V', '-5 to 5V'] }, in_range: { slot: 1, values: ['0 to 1', '-1 to 1'] }, transpose: { slot: 2, values: ['A', 'C'] } },
  },
  {
    id: 88,
    zebu: true,
    name: 'Euro CV In 1',
    display1: 'CI1',
    category: 'Interface',
    description: '',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 0,
    cpu: 0.1,
    blocks: { cv_out: { initial: true, position: 0 } },
    options: {
      out_range: { slot: 0, values: ['0 to 1', '-1 to 1'] },
      in_range: { slot: 1, values: ['0 to 10V', '0 to 5V', '-5 to 5V'] },
      clock_filter: { slot: 2, values: ['none', '2,8', '1,4', '5,5'] },
      transpose: { slot: 3, values: ['A', 'C'] },
    },
  },
  {
    id: 89,
    zebu: true,
    name: 'Euro CV In 2',
    display1: 'CI2',
    category: 'Interface',
    description: '',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 0,
    cpu: 0.1,
    blocks: { cv_out: { initial: true, position: 0 } },
    options: {
      out_range: { slot: 0, values: ['0 to 1', '-1 to 1'] },
      in_range: { slot: 1, values: ['0 to 10V', '0 to 5V', '-5 to 5V'] },
      clock_filter: { slot: 2, values: ['none', '2,8', '1,4', '5,5'] },
      transpose: { slot: 3, values: ['A', 'C'] },
    },
  },
  {
    id: 90,
    zebu: true,
    name: 'Euro CV In 3',
    display1: 'CI3',
    category: 'Interface',
    description: '',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 0,
    cpu: 0.1,
    blocks: { cv_out: { initial: true, position: 0 } },
    options: {
      out_range: { slot: 0, values: ['0 to 1', '-1 to 1'] },
      in_range: { slot: 1, values: ['0 to 10V', '0 to 5V', '-5 to 5V'] },
      clock_filter: { slot: 2, values: ['none', '2,8', '1,4', '5,5'] },
      transpose: { slot: 3, values: ['A', 'C'] },
    },
  },
  {
    id: 91,
    zebu: true,
    name: 'Euro CV In 4',
    display1: 'CI4',
    category: 'Interface',
    description: '',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 0,
    cpu: 0.1,
    blocks: { cv_out: { initial: true, position: 0 } },
    options: {
      out_range: { slot: 0, values: ['0 to 1', '-1 to 1'] },
      in_range: { slot: 1, values: ['0 to 10V', '0 to 5V', '-5 to 5V'] },
      clock_filter: { slot: 2, values: ['none', '2,8', '1,4', '5,5'] },
      transpose: { slot: 3, values: ['A', 'C'] },
    },
  },
  {
    id: 92,
    zebu: true,
    name: 'Euro Headphone Amp',
    display1: 'EHA',
    category: 'Interface',
    description: '',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 1,
    cpu: 0.4,
    blocks: { level: { initial: true, param: true, position: 0 } },
    options: {},
  },
  {
    id: 93,
    zebu: true,
    name: 'Euro Audio Input 1',
    display1: 'EI1',
    category: 'Interface',
    description: 'Connect audio from the outside world into the grid.\nThis could be a guitar, bass, synth module, computer Audio, etc',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 0,
    cpu: 0.4,
    blocks: { output: { initial: true, position: 0 } },
    options: { input_pad: { slot: 0, values: ['6dB', '12dB', 'no_pad'] } },
  },
  {
    id: 94,
    zebu: true,
    name: 'Euro Audio Input 2',
    display1: 'EI2',
    category: 'Interface',
    description: 'Connect audio from the outside world into the grid.\nThis could be a guitar, bass, synth module, computer Audio, etc',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 0,
    cpu: 0.4,
    blocks: { output: { initial: true, position: 0 } },
    options: { input_pad: { slot: 0, values: ['6dB', '12dB', 'no_pad'] } },
  },
  {
    id: 95,
    zebu: true,
    name: 'Euro Audio Output 1',
    display1: 'EO1',
    category: 'Interface',
    description: 'Connect audio from your ZOIA into the outside world.\nConnect to your amplifier, a DI box, your audio interface, etc.',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 0,
    cpu: 0.4,
    blocks: { input: { initial: true, position: 0 } },
    options: {},
  },
  {
    id: 96,
    zebu: true,
    name: 'Euro Audio Output 2',
    display1: 'EO2',
    category: 'Interface',
    description: 'Connect audio from your ZOIA into the outside world.\nConnect to your amplifier, a DI box, your audio interface, etc.',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 0,
    cpu: 0.4,
    blocks: { input: { initial: true, position: 0 } },
    options: {},
  },
  {
    id: 97,
    zebu: true,
    name: 'Euro Pushbutton 1',
    display1: 'EB1',
    category: 'Interface',
    description: 'Turns a grid button into a button you can push to send a CV signal.\nTap in a tempo, open up a VCA, trigger a sequencer, or anything else.\nThe grid is your oyster!',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 0,
    cpu: 0.02,
    blocks: { cv_out: { initial: true, position: 1 } },
    options: { action: { slot: 0, values: ['momentary', 'latching'] }, normally: { slot: 1, values: ['zero', 'one'] } },
  },
  {
    id: 98,
    zebu: true,
    name: 'Euro Pushbutton 2',
    display1: 'EB2',
    category: 'Interface',
    description: 'Turns a grid button into a button you can push to send a CV signal.\nTap in a tempo, open up a VCA, trigger a sequencer, or anything else.\nThe grid is your oyster!',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 0,
    cpu: 0.02,
    blocks: { cv_out: { initial: true, position: 1 } },
    options: { action: { slot: 0, values: ['momentary', 'latching'] }, normally: { slot: 1, values: ['zero', 'one'] } },
  },
  {
    id: 99,
    zebu: true,
    name: 'Euro CV Out 1',
    display1: 'CO1',
    category: 'Interface',
    description: '',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 1,
    cpu: 0.1,
    blocks: { cv_in: { initial: true, param: true, position: 0 } },
    options: { out_range: { slot: 0, values: ['0 to 10V', '0 to 5V', '-5 to 5V'] }, in_range: { slot: 1, values: ['0 to 1', '-1 to 1'] }, transpose: { slot: 2, values: ['A', 'C'] } },
  },
  {
    id: 100,
    zebu: true,
    name: 'Euro CV Out 2',
    display1: 'CO2',
    category: 'Interface',
    description: '',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 1,
    cpu: 0.1,
    blocks: { cv_in: { initial: true, param: true, position: 0 } },
    options: { out_range: { slot: 0, values: ['0 to 10V', '0 to 5V', '-5 to 5V'] }, in_range: { slot: 1, values: ['0 to 1', '-1 to 1'] }, transpose: { slot: 2, values: ['A', 'C'] } },
  },
  {
    id: 101,
    zebu: true,
    name: 'Euro CV Out 3',
    display1: 'CO3',
    category: 'Interface',
    description: '',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 1,
    cpu: 0.1,
    blocks: { cv_in: { initial: true, param: true, position: 0 } },
    options: { out_range: { slot: 0, values: ['0 to 10V', '0 to 5V', '-5 to 5V'] }, in_range: { slot: 1, values: ['0 to 1', '-1 to 1'] }, transpose: { slot: 2, values: ['A', 'C'] } },
  },
  {
    id: 102,
    name: 'Sampler',
    category: 'Audio',
    description: 'Load or record your favourite sample, chop it up, then play it back at any speed/pitch your heart desires. All samples must be mono or stereo PCM WAV files that are 10 minutes or less in length.',
    defaultBlocks: 6,
    minBlocks: 6,
    maxBlocks: 12,
    params: 6,
    cpu: 0.9,
    blocks: {
      audio_in_L: { position: 0 },
      audio_in_R: { position: 1 },
      record: { param: true, position: 2 },
      sample_playback: { initial: true, param: true, position: 3 },
      speed_pitch: { initial: true, param: true, position: 4 },
      direction: { param: true, position: 5 },
      start: { initial: true, param: true, position: 6 },
      length: { initial: true, param: true, position: 7 },
      position_cv_out: { position: 8 },
      loop_end_cv_out: { position: 9 },
      audio_out_L: { initial: true, position: 10 },
      audio_out_R: { initial: true, position: 11 },
    },
    options: {
      record: { slot: 0, values: ['disabled', 'new sample', 'overdub', 'punch-in'] },
      playback: { slot: 1, values: ['trigger', 'gate', 'loop'] },
      reverse_button: { slot: 2, values: ['off', 'on'] },
      cv_outs: { slot: 3, values: ['off', 'on'] },
      channels: { slot: 4, values: ['stereo', 'mono'] },
    },
    conditions: {
      audio_in_L: {
        type: 'multi',
        operator: 'or',
        conditions: [{ type: 'value', option: 'record', value: 'new sample' }, { type: 'value', option: 'record', value: 'overdub' }, { type: 'value', option: 'record', value: 'punch-in' }],
      },
      audio_in_R: {
        type: 'multi',
        operator: 'and',
        conditions: [
          {
            type: 'multi',
            operator: 'or',
            conditions: [{ type: 'value', option: 'record', value: 'new sample' }, { type: 'value', option: 'record', value: 'overdub' }, { type: 'value', option: 'record', value: 'punch-in' }],
          },
          { type: 'value', option: 'channels', value: 'stereo' },
        ],
      },
      direction: { type: 'toggle', option: 'reverse_button' },
      position_cv_out: { type: 'toggle', option: 'cv_outs' },
      loop_end_cv_out: { type: 'toggle', option: 'cv_outs' },
    },
  },
  {
    id: 103,
    name: 'Device Control',
    display1: 'DC',
    category: 'Interface',
    description: 'Perform logical operations with CV inputs. Operations include: AND, OR, NOT, NOR, NAND, XOR, XNOR.',
    defaultBlocks: 1,
    minBlocks: 1,
    maxBlocks: 1,
    params: 1,
    cpu: 0.1,
    blocks: { bypass: { initial: true, param: true, position: 0 }, aux: { param: true, position: 0 }, performance: { param: true, position: 0 } },
    options: { control: { slot: 0, values: ['bypass', 'stomp aux', 'perform'] } },
    conditions: { bypass: { type: 'value', option: 'control', value: 'bypass' }, aux: { type: 'value', option: 'control', value: 'stomp aux' }, performance: { type: 'value', option: 'control', value: 'perform' } },
  },
  {
    id: 104,
    name: 'CV Mixer',
    category: 'CV',
    description: 'An 8 channel CV Mixer and attenuverter.',
    defaultBlocks: 5,
    minBlocks: 5,
    maxBlocks: 17,
    params: 16,
    cpu: 0.7,
    blocks: {
      cv_in_1: { initial: true, param: true, position: 0 },
      cv_in_2: { initial: true, param: true, position: 1 },
      cv_in_3: { param: true, position: 2 },
      cv_in_4: { param: true, position: 3 },
      cv_in_5: { param: true, position: 4 },
      cv_in_6: { param: true, position: 5 },
      cv_in_7: { param: true, position: 6 },
      cv_in_8: { param: true, position: 7 },
      atten_1: { initial: true, param: true, position: 8 },
      atten_2: { initial: true, param: true, position: 9 },
      atten_3: { param: true, position: 10 },
      atten_4: { param: true, position: 11 },
      atten_5: { param: true, position: 12 },
      atten_6: { param: true, position: 13 },
      atten_7: { param: true, position: 14 },
      atten_8: { param: true, position: 15 },
      cv_out: { initial: true, position: 16 },
    },
    options: { num_channels: { slot: 0, values: { min: 1, max: 8 } }, levels: { slot: 1, values: ['summing', 'average'] } },
    conditions: { cv_in_3: { type: 'sequential', option: 'num_channels', startPosition: 2, nameTemplate: 'cv_in_{n}' }, atten_3: { type: 'sequential', option: 'num_channels', startPosition: 10, nameTemplate: 'atten_{n}' } },
  },
  {
    id: 105,
    name: 'Logic Gate',
    category: 'CV',
    description: '',
    defaultBlocks: 3,
    minBlocks: 2,
    maxBlocks: 40,
    params: 39,
    cpu: 0.1,
    blocks: {
      in_1: { initial: true, param: true, position: 0 },
      in_2: { initial: true, param: true, position: 1 },
      in_3: { param: true, position: 2 },
      in_4: { param: true, position: 3 },
      in_5: { param: true, position: 4 },
      in_6: { param: true, position: 5 },
      in_7: { param: true, position: 6 },
      in_8: { param: true, position: 7 },
      in_9: { param: true, position: 8 },
      in_10: { param: true, position: 9 },
      in_11: { param: true, position: 10 },
      in_12: { param: true, position: 11 },
      in_13: { param: true, position: 12 },
      in_14: { param: true, position: 13 },
      in_15: { param: true, position: 14 },
      in_16: { param: true, position: 15 },
      in_17: { param: true, position: 16 },
      in_18: { param: true, position: 17 },
      in_19: { param: true, position: 18 },
      in_20: { param: true, position: 19 },
      in_21: { param: true, position: 20 },
      in_22: { param: true, position: 21 },
      in_23: { param: true, position: 22 },
      in_24: { param: true, position: 23 },
      in_25: { param: true, position: 24 },
      in_26: { param: true, position: 25 },
      in_27: { param: true, position: 26 },
      in_28: { param: true, position: 27 },
      in_29: { param: true, position: 28 },
      in_30: { param: true, position: 29 },
      in_31: { param: true, position: 30 },
      in_32: { param: true, position: 31 },
      in_33: { param: true, position: 32 },
      in_34: { param: true, position: 33 },
      in_35: { param: true, position: 34 },
      in_36: { param: true, position: 35 },
      in_37: { param: true, position: 36 },
      in_38: { param: true, position: 37 },
      threshold: { param: true, position: 38 },
      cv_out: { initial: true, position: 39 },
    },
    options: { operation: { slot: 0, values: ['AND', 'OR', 'NOR', 'NAND', 'XOR', 'XNOR', 'NOT'] }, num_of_inputs: { slot: 1, values: { min: 2, max: 38 } }, threshold: { slot: 2, values: ['off', 'on'] } },
    conditions: { in_2: { type: 'sequential', option: 'num_of_inputs', startPosition: 1, nameTemplate: 'in_{n}' }, threshold: { type: 'toggle', option: 'threshold' } },
  },
  {
    id: 106,
    name: 'Reverse Delay',
    category: 'Effect',
    description: 'This delay effect lets you twist time with reversed, pitch shifted repeats.',
    defaultBlocks: 6,
    minBlocks: 6,
    maxBlocks: 9,
    params: 5,
    cpu: 0.1,
    blocks: {
      audio_in_L: { initial: true, position: 0 },
      audio_in_R: { position: 1 },
      delay_time: { initial: true, param: true, position: 2 },
      tap_tempo_in: { param: true, position: 3 },
      tap_ratio: { param: true, position: 4 },
      feedback: { initial: true, param: true, position: 5 },
      pitch: { initial: true, param: true, position: 6 },
      mix: { initial: true, param: true, position: 7 },
      audio_out_L: { initial: true, position: 8 },
      audio_out_R: { position: 9 },
    },
    options: { channels: { slot: 0, values: ['mono', 'stereo'] }, control: { slot: 1, values: ['rate', 'tap_tempo'] } },
    conditions: {
      audio_in_R: { type: 'value', option: 'channels', value: 'stereo' },
      tap_tempo_in: { type: 'value', option: 'control', value: 'tap_tempo' },
      audio_out_R: { type: 'value', option: 'channels', value: 'stereo' },
    },
  },
  {
    id: 107,
    name: 'Univibe',
    category: 'Effect',
    description: 'Classic vibe sound with some added versatility.',
    defaultBlocks: 6,
    minBlocks: 6,
    maxBlocks: 8,
    params: 4,
    cpu: 0.1,
    blocks: {
      audio_in_L: { initial: true, position: 0 },
      audio_in_R: { position: 1 },
      rate: { initial: true, param: true, position: 2 },
      tap_tempo_in: { param: true, position: 3 },
      direct: { param: true, position: 4 },
      depth: { initial: true, param: true, position: 5 },
      resonance: { initial: true, param: true, position: 6 },
      mix: { initial: true, param: true, position: 7 },
      audio_out_L: { initial: true, position: 8 },
      audio_out_R: { position: 9 },
    },
    options: { channels: { slot: 0, values: ['1in->1out', '1in->2out', 'stereo'] }, control: { slot: 1, values: ['rate', 'tap_tempo', 'cv_direct'] } },
    conditions: {
      audio_in_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: 'stereo' }] },
      tap_tempo_in: { type: 'value', option: 'control', value: 'tap_tempo' },
      direct: { type: 'value', option: 'control', value: 'cv_direct' },
      audio_out_R: { type: 'multi', operator: 'or', conditions: [{ type: 'value', option: 'channels', value: '1in->2out' }, { type: 'value', option: 'channels', value: 'stereo' }] },
    },
  },
]
